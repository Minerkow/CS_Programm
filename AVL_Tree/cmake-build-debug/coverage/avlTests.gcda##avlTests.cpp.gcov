        -:    0:Source:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/test/avlTests.cpp
        -:    0:Graph:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/cmake-build-debug/CMakeFiles/AVL_Tree_Test.dir/test/avlTests.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:#include <gtest/gtest.h>
        -:    2:extern "C" {
        -:    3:    #include "../AVL_Tree.h"
        -:    4:}
        -:    5:
    #####:    6:int main() {
    #####:    7:    testing::InitGoogleTest();
    %%%%%:    7-block  0
    #####:    8:    return RUN_ALL_TESTS();
        -:    9:}
        -:   10:
        -:   11://---------------------------------------------------------------------------------------------------------------------------------------
        -:   12:
    #####:   13:TEST(AVL_Tree, avlInsert1) {
    #####:   14:    AVL_Tree* avlTree = avlInit();
    #####:   15:    avlInsert(avlTree, 1);
    #####:   16:    ASSERT_EQ(avlGetMaxElem(avlTree), avlGetMinElem(avlTree));
        -:   17:}
------------------
_ZN24AVL_Tree_avlInsert1_Test8TestBodyEv:
    #####:   13:TEST(AVL_Tree, avlInsert1) {
    #####:   14:    AVL_Tree* avlTree = avlInit();
    %%%%%:   14-block  0
    #####:   15:    avlInsert(avlTree, 1);
    #####:   16:    ASSERT_EQ(avlGetMaxElem(avlTree), avlGetMinElem(avlTree));
    %%%%%:   16-block  0
    %%%%%:   16-block  1
    %%%%%:   16-block  2
    %%%%%:   16-block  3
    %%%%%:   16-block  4
    %%%%%:   16-block  5
    %%%%%:   16-block  6
    $$$$$:   16-block  7
    $$$$$:   16-block  8
    $$$$$:   16-block  9
    $$$$$:   16-block 10
    $$$$$:   16-block 11
    $$$$$:   16-block 12
    $$$$$:   16-block 13
        -:   17:}
------------------
_ZN24AVL_Tree_avlInsert1_TestC2Ev:
    #####:   13:TEST(AVL_Tree, avlInsert1) {
    %%%%%:   13-block  0
------------------
        -:   18:
    #####:   19:TEST(AVL_Tree, avlInsert2) {
    #####:   20:    int err = avlInsert(NULL, 1);
    #####:   21:    ASSERT_EQ(err, AVLERR_NOT_INIT);
        -:   22:}
------------------
_ZN24AVL_Tree_avlInsert2_Test8TestBodyEv:
    #####:   19:TEST(AVL_Tree, avlInsert2) {
    #####:   20:    int err = avlInsert(NULL, 1);
    %%%%%:   20-block  0
    #####:   21:    ASSERT_EQ(err, AVLERR_NOT_INIT);
    %%%%%:   21-block  0
    %%%%%:   21-block  1
    %%%%%:   21-block  2
    %%%%%:   21-block  3
    %%%%%:   21-block  4
    %%%%%:   21-block  5
    $$$$$:   21-block  6
    $$$$$:   21-block  7
    $$$$$:   21-block  8
    $$$$$:   21-block  9
    $$$$$:   21-block 10
    $$$$$:   21-block 11
        -:   22:}
------------------
_ZN24AVL_Tree_avlInsert2_TestC2Ev:
    #####:   19:TEST(AVL_Tree, avlInsert2) {
    %%%%%:   19-block  0
------------------
        -:   23:
        -:   24://-----------------------------------------------------------------------------------------------------------------
        -:   25:
    #####:   26:TEST(AVL_Tree, avlLoadFromArray1) {
    #####:   27:    const size_t numNumbers = 100000;
    #####:   28:    AVL_Tree* avlTree = avlInit();
    #####:   29:    std::vector<int> input;
    #####:   30:    std::set<int> garantSet;
    #####:   31:    std::srand(std::time(0));
    #####:   32:    for (int i = 0; i < numNumbers; ++i) {
    #####:   33:        input.push_back(std::rand() % 1000);
    #####:   34:        garantSet.insert(input.back());
        -:   35:    }
    #####:   36:    std::vector<int> trueRes;
    #####:   37:    for (auto& it : garantSet) {
    #####:   38:        trueRes.push_back(it);
        -:   39:    }
    #####:   40:    std::vector<int> res(trueRes.size());
    #####:   41:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:   42:    avlSaveInArray(avlTree, res.data(), avlSize(avlTree));
    #####:   43:    std::cout << std::endl;
    #####:   44:    ASSERT_EQ(avlSize(avlTree), trueRes.size());
    #####:   45:    ASSERT_EQ(trueRes, res);
        -:   46:}
------------------
_ZN31AVL_Tree_avlLoadFromArray1_Test8TestBodyEv:
    #####:   26:TEST(AVL_Tree, avlLoadFromArray1) {
    #####:   27:    const size_t numNumbers = 100000;
    #####:   28:    AVL_Tree* avlTree = avlInit();
    %%%%%:   28-block  0
    #####:   29:    std::vector<int> input;
    %%%%%:   29-block  0
    $$$$$:   29-block  1
    #####:   30:    std::set<int> garantSet;
    $$$$$:   30-block  0
    #####:   31:    std::srand(std::time(0));
    #####:   32:    for (int i = 0; i < numNumbers; ++i) {
    %%%%%:   32-block  0
    %%%%%:   32-block  1
    #####:   33:        input.push_back(std::rand() % 1000);
    %%%%%:   33-block  0
    $$$$$:   33-block  1
    #####:   34:        garantSet.insert(input.back());
    %%%%%:   34-block  0
        -:   35:    }
    #####:   36:    std::vector<int> trueRes;
    %%%%%:   36-block  0
    $$$$$:   36-block  1
    #####:   37:    for (auto& it : garantSet) {
    %%%%%:   37-block  0
    %%%%%:   37-block  1
    %%%%%:   37-block  2
    #####:   38:        trueRes.push_back(it);
        -:   39:    }
    #####:   40:    std::vector<int> res(trueRes.size());
    %%%%%:   40-block  0
    $$$$$:   40-block  1
    $$$$$:   40-block  2
    #####:   41:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:   42:    avlSaveInArray(avlTree, res.data(), avlSize(avlTree));
    %%%%%:   42-block  0
    %%%%%:   42-block  1
    #####:   43:    std::cout << std::endl;
    %%%%%:   43-block  0
    #####:   44:    ASSERT_EQ(avlSize(avlTree), trueRes.size());
    %%%%%:   44-block  0
    %%%%%:   44-block  1
    %%%%%:   44-block  2
    %%%%%:   44-block  3
    %%%%%:   44-block  4
    %%%%%:   44-block  5
    %%%%%:   44-block  6
    $$$$$:   44-block  7
    $$$$$:   44-block  8
    $$$$$:   44-block  9
    $$$$$:   44-block 10
    $$$$$:   44-block 11
    $$$$$:   44-block 12
    $$$$$:   44-block 13
    #####:   45:    ASSERT_EQ(trueRes, res);
    %%%%%:   45-block  0
    %%%%%:   45-block  1
    %%%%%:   45-block  2
    %%%%%:   45-block  3
    %%%%%:   45-block  4
    %%%%%:   45-block  5
    $$$$$:   45-block  6
    $$$$$:   45-block  7
    $$$$$:   45-block  8
    $$$$$:   45-block  9
    $$$$$:   45-block 10
        -:   46:}
------------------
_ZN31AVL_Tree_avlLoadFromArray1_TestC2Ev:
    #####:   26:TEST(AVL_Tree, avlLoadFromArray1) {
    %%%%%:   26-block  0
------------------
        -:   47:
    #####:   48:TEST(AVL_Tree, avlLoadFromArrayStress) {
    #####:   49:    AVL_Tree* avlTree = avlInit();
    #####:   50:    std::vector<int> input = {27, 80, 8, 42, 37, 59, 90, 42, 90, 46, 92, 22, 18, 0, 99, 98, 92, 18, 16, 2, 45, 75, 30, 27, 23, 34, 50, 88, 53, 75, 73, 80, 7, 33, 22, 44, 92, 65, 86, 82};
    #####:   51:    std::vector<int> trueRes = {0, 2, 7, 8, 16, 18, 22, 23, 27, 30, 33, 34, 37, 42, 44, 45, 46, 50, 53, 59, 65, 73, 75, 80, 82, 86, 88, 90, 92, 98, 99};
    #####:   52:    std::vector<int> res(trueRes.size());
    #####:   53:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:   54:    avlSaveInArray(avlTree, res.data(), res.size());
    #####:   55:    ASSERT_EQ(trueRes, res);
        -:   56:}
------------------
_ZN36AVL_Tree_avlLoadFromArrayStress_Test8TestBodyEv:
    #####:   48:TEST(AVL_Tree, avlLoadFromArrayStress) {
    #####:   49:    AVL_Tree* avlTree = avlInit();
    %%%%%:   49-block  0
    #####:   50:    std::vector<int> input = {27, 80, 8, 42, 37, 59, 90, 42, 90, 46, 92, 22, 18, 0, 99, 98, 92, 18, 16, 2, 45, 75, 30, 27, 23, 34, 50, 88, 53, 75, 73, 80, 7, 33, 22, 44, 92, 65, 86, 82};
    %%%%%:   50-block  0
    $$$$$:   50-block  1
    $$$$$:   50-block  2
    $$$$$:   50-block  3
    #####:   51:    std::vector<int> trueRes = {0, 2, 7, 8, 16, 18, 22, 23, 27, 30, 33, 34, 37, 42, 44, 45, 46, 50, 53, 59, 65, 73, 75, 80, 82, 86, 88, 90, 92, 98, 99};
    $$$$$:   51-block  0
    $$$$$:   51-block  1
    $$$$$:   51-block  2
    #####:   52:    std::vector<int> res(trueRes.size());
    $$$$$:   52-block  0
    $$$$$:   52-block  1
    #####:   53:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:   54:    avlSaveInArray(avlTree, res.data(), res.size());
    %%%%%:   54-block  0
    #####:   55:    ASSERT_EQ(trueRes, res);
    %%%%%:   55-block  0
    %%%%%:   55-block  1
    %%%%%:   55-block  2
    %%%%%:   55-block  3
    %%%%%:   55-block  4
    %%%%%:   55-block  5
    $$$$$:   55-block  6
    $$$$$:   55-block  7
    $$$$$:   55-block  8
    $$$$$:   55-block  9
    $$$$$:   55-block 10
        -:   56:}
------------------
_ZN36AVL_Tree_avlLoadFromArrayStress_TestC2Ev:
    #####:   48:TEST(AVL_Tree, avlLoadFromArrayStress) {
    %%%%%:   48-block  0
------------------
        -:   57:
    #####:   58:TEST(AVL_Tree, avlLoadFromArray2) {
    #####:   59:    AVL_Tree* avlTree = avlInit();
    #####:   60:    std::vector<int> input = {1, 2, 3, 4, 2};
    #####:   61:    std::vector<int> trueRes = {1, 2, 3, 4};
    #####:   62:    std::vector<int> res(trueRes.size());
    #####:   63:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:   64:    avlSaveInArray(avlTree, res.data(), res.size());
    #####:   65:    ASSERT_EQ(trueRes, res);
        -:   66:}
------------------
_ZN31AVL_Tree_avlLoadFromArray2_Test8TestBodyEv:
    #####:   58:TEST(AVL_Tree, avlLoadFromArray2) {
    #####:   59:    AVL_Tree* avlTree = avlInit();
    %%%%%:   59-block  0
    #####:   60:    std::vector<int> input = {1, 2, 3, 4, 2};
    %%%%%:   60-block  0
    $$$$$:   60-block  1
    $$$$$:   60-block  2
    $$$$$:   60-block  3
    #####:   61:    std::vector<int> trueRes = {1, 2, 3, 4};
    $$$$$:   61-block  0
    $$$$$:   61-block  1
    $$$$$:   61-block  2
    #####:   62:    std::vector<int> res(trueRes.size());
    $$$$$:   62-block  0
    $$$$$:   62-block  1
    #####:   63:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:   64:    avlSaveInArray(avlTree, res.data(), res.size());
    %%%%%:   64-block  0
    #####:   65:    ASSERT_EQ(trueRes, res);
    %%%%%:   65-block  0
    %%%%%:   65-block  1
    %%%%%:   65-block  2
    %%%%%:   65-block  3
    %%%%%:   65-block  4
    %%%%%:   65-block  5
    $$$$$:   65-block  6
    $$$$$:   65-block  7
    $$$$$:   65-block  8
    $$$$$:   65-block  9
    $$$$$:   65-block 10
        -:   66:}
------------------
_ZN31AVL_Tree_avlLoadFromArray2_TestC2Ev:
    #####:   58:TEST(AVL_Tree, avlLoadFromArray2) {
    %%%%%:   58-block  0
------------------
        -:   67:
    #####:   68:TEST(AVL_Tree, avlLoadFromArray3) {
    #####:   69:    AVL_Tree* avlTree = avlInit();
    #####:   70:    std::vector<int> input = { 0, 1, 3};
    #####:   71:    std::vector<int> trueRes = { 0, 1, 3};
    #####:   72:    std::vector<int> res(trueRes.size());
    #####:   73:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:   74:    avlSaveInArray(avlTree, res.data(), res.size());
    #####:   75:    ASSERT_EQ(trueRes, res);
        -:   76:}
------------------
_ZN31AVL_Tree_avlLoadFromArray3_Test8TestBodyEv:
    #####:   68:TEST(AVL_Tree, avlLoadFromArray3) {
    #####:   69:    AVL_Tree* avlTree = avlInit();
    %%%%%:   69-block  0
    #####:   70:    std::vector<int> input = { 0, 1, 3};
    %%%%%:   70-block  0
    $$$$$:   70-block  1
    $$$$$:   70-block  2
    $$$$$:   70-block  3
    #####:   71:    std::vector<int> trueRes = { 0, 1, 3};
    $$$$$:   71-block  0
    $$$$$:   71-block  1
    $$$$$:   71-block  2
    #####:   72:    std::vector<int> res(trueRes.size());
    $$$$$:   72-block  0
    $$$$$:   72-block  1
    #####:   73:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:   74:    avlSaveInArray(avlTree, res.data(), res.size());
    %%%%%:   74-block  0
    #####:   75:    ASSERT_EQ(trueRes, res);
    %%%%%:   75-block  0
    %%%%%:   75-block  1
    %%%%%:   75-block  2
    %%%%%:   75-block  3
    %%%%%:   75-block  4
    %%%%%:   75-block  5
    $$$$$:   75-block  6
    $$$$$:   75-block  7
    $$$$$:   75-block  8
    $$$$$:   75-block  9
    $$$$$:   75-block 10
        -:   76:}
------------------
_ZN31AVL_Tree_avlLoadFromArray3_TestC2Ev:
    #####:   68:TEST(AVL_Tree, avlLoadFromArray3) {
    %%%%%:   68-block  0
------------------
        -:   77:
    #####:   78:TEST(AVL_Tree, avlLoadFromArray4) {
    #####:   79:    AVL_Tree* avlTree = avlInit();
    #####:   80:    std::vector<int> input = { 0, 1, 1, 1, 3, 3, 4, 6, 7, 9 };
    #####:   81:    std::vector<int> trueRes = { 0, 1, 3, 4, 6, 7, 9 };
    #####:   82:    std::vector<int> res(trueRes.size());
    #####:   83:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:   84:    avlSaveInArray(avlTree, res.data(), res.size());
    #####:   85:    ASSERT_EQ(trueRes, res);
        -:   86:}
------------------
_ZN31AVL_Tree_avlLoadFromArray4_Test8TestBodyEv:
    #####:   78:TEST(AVL_Tree, avlLoadFromArray4) {
    #####:   79:    AVL_Tree* avlTree = avlInit();
    %%%%%:   79-block  0
    #####:   80:    std::vector<int> input = { 0, 1, 1, 1, 3, 3, 4, 6, 7, 9 };
    %%%%%:   80-block  0
    $$$$$:   80-block  1
    $$$$$:   80-block  2
    $$$$$:   80-block  3
    #####:   81:    std::vector<int> trueRes = { 0, 1, 3, 4, 6, 7, 9 };
    $$$$$:   81-block  0
    $$$$$:   81-block  1
    $$$$$:   81-block  2
    #####:   82:    std::vector<int> res(trueRes.size());
    $$$$$:   82-block  0
    $$$$$:   82-block  1
    #####:   83:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:   84:    avlSaveInArray(avlTree, res.data(), res.size());
    %%%%%:   84-block  0
    #####:   85:    ASSERT_EQ(trueRes, res);
    %%%%%:   85-block  0
    %%%%%:   85-block  1
    %%%%%:   85-block  2
    %%%%%:   85-block  3
    %%%%%:   85-block  4
    %%%%%:   85-block  5
    $$$$$:   85-block  6
    $$$$$:   85-block  7
    $$$$$:   85-block  8
    $$$$$:   85-block  9
    $$$$$:   85-block 10
        -:   86:}
------------------
_ZN31AVL_Tree_avlLoadFromArray4_TestC2Ev:
    #####:   78:TEST(AVL_Tree, avlLoadFromArray4) {
    %%%%%:   78-block  0
------------------
        -:   87:
    #####:   88:TEST(AVL_Tree, avlLoadFromArray5) {
    #####:   89:    AVL_Tree* avlTree = avlInit();
        -:   90:    int arr[5];
    #####:   91:    ASSERT_EQ(AVLERR_NULL_POINTER_ARG, avlLoadFromArray(avlTree, NULL, 1));
    #####:   92:    ASSERT_EQ(AVLERR_NOT_INIT, avlLoadFromArray(NULL, arr, 5));
    #####:   93:    ASSERT_EQ(AVLERR_OK, avlLoadFromArray(avlTree, arr, 0));
        -:   94:}
------------------
_ZN31AVL_Tree_avlLoadFromArray5_Test8TestBodyEv:
    #####:   88:TEST(AVL_Tree, avlLoadFromArray5) {
    #####:   89:    AVL_Tree* avlTree = avlInit();
    %%%%%:   89-block  0
        -:   90:    int arr[5];
    #####:   91:    ASSERT_EQ(AVLERR_NULL_POINTER_ARG, avlLoadFromArray(avlTree, NULL, 1));
    %%%%%:   91-block  0
    %%%%%:   91-block  1
    %%%%%:   91-block  2
    %%%%%:   91-block  3
    %%%%%:   91-block  4
    %%%%%:   91-block  5
    %%%%%:   91-block  6
    $$$$$:   91-block  7
    $$$$$:   91-block  8
    $$$$$:   91-block  9
    $$$$$:   91-block 10
    $$$$$:   91-block 11
    $$$$$:   91-block 12
    $$$$$:   91-block 13
    #####:   92:    ASSERT_EQ(AVLERR_NOT_INIT, avlLoadFromArray(NULL, arr, 5));
    %%%%%:   92-block  0
    %%%%%:   92-block  1
    %%%%%:   92-block  2
    %%%%%:   92-block  3
    %%%%%:   92-block  4
    %%%%%:   92-block  5
    %%%%%:   92-block  6
    $$$$$:   92-block  7
    $$$$$:   92-block  8
    $$$$$:   92-block  9
    $$$$$:   92-block 10
    $$$$$:   92-block 11
    $$$$$:   92-block 12
    $$$$$:   92-block 13
    #####:   93:    ASSERT_EQ(AVLERR_OK, avlLoadFromArray(avlTree, arr, 0));
    %%%%%:   93-block  0
    %%%%%:   93-block  1
    %%%%%:   93-block  2
    %%%%%:   93-block  3
    %%%%%:   93-block  4
    %%%%%:   93-block  5
    %%%%%:   93-block  6
    $$$$$:   93-block  7
    $$$$$:   93-block  8
    $$$$$:   93-block  9
    $$$$$:   93-block 10
    $$$$$:   93-block 11
    $$$$$:   93-block 12
    $$$$$:   93-block 13
        -:   94:}
------------------
_ZN31AVL_Tree_avlLoadFromArray5_TestC2Ev:
    #####:   88:TEST(AVL_Tree, avlLoadFromArray5) {
    %%%%%:   88-block  0
------------------
        -:   95:
    #####:   96:TEST(AVL_Tree, avlLoadFromArray6) {
    #####:   97:    AVL_Tree *avlTree = avlInit();
    #####:   98:    std::vector<int> input = {0, 1, 3, 4, 6, 7, 9};
    #####:   99:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:  100:}
------------------
_ZN31AVL_Tree_avlLoadFromArray6_Test8TestBodyEv:
    #####:   96:TEST(AVL_Tree, avlLoadFromArray6) {
    #####:   97:    AVL_Tree *avlTree = avlInit();
    %%%%%:   97-block  0
    #####:   98:    std::vector<int> input = {0, 1, 3, 4, 6, 7, 9};
    %%%%%:   98-block  0
    %%%%%:   98-block  1
    $$$$$:   98-block  2
    $$$$$:   98-block  3
    $$$$$:   98-block  4
    #####:   99:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:  100:}
------------------
_ZN31AVL_Tree_avlLoadFromArray6_TestC2Ev:
    #####:   96:TEST(AVL_Tree, avlLoadFromArray6) {
    %%%%%:   96-block  0
------------------
        -:  101:
        -:  102://-------------------------------------------------------------------------------------------------------------------------------
        -:  103:
    #####:  104:TEST(AVL_Tree, avlEmpty) {
    #####:  105:    AVL_Tree* avlTree = avlInit();
    #####:  106:    ASSERT_TRUE(avlEmpty(avlTree));
    #####:  107:    ASSERT_TRUE(avlEmpty(NULL));
    #####:  108:    avlInsert(avlTree, 1);
    #####:  109:    ASSERT_FALSE(avlEmpty(avlTree));
        -:  110:}
------------------
_ZN22AVL_Tree_avlEmpty_Test8TestBodyEv:
    #####:  104:TEST(AVL_Tree, avlEmpty) {
    #####:  105:    AVL_Tree* avlTree = avlInit();
    %%%%%:  105-block  0
    #####:  106:    ASSERT_TRUE(avlEmpty(avlTree));
    %%%%%:  106-block  0
    %%%%%:  106-block  1
    %%%%%:  106-block  2
    %%%%%:  106-block  3
    %%%%%:  106-block  4
    %%%%%:  106-block  5
    $$$$$:  106-block  6
    $$$$$:  106-block  7
    $$$$$:  106-block  8
    $$$$$:  106-block  9
    $$$$$:  106-block 10
    $$$$$:  106-block 11
    $$$$$:  106-block 12
    #####:  107:    ASSERT_TRUE(avlEmpty(NULL));
    %%%%%:  107-block  0
    %%%%%:  107-block  1
    %%%%%:  107-block  2
    %%%%%:  107-block  3
    %%%%%:  107-block  4
    %%%%%:  107-block  5
    %%%%%:  107-block  6
    $$$$$:  107-block  7
    $$$$$:  107-block  8
    $$$$$:  107-block  9
    $$$$$:  107-block 10
    $$$$$:  107-block 11
    $$$$$:  107-block 12
    $$$$$:  107-block 13
    #####:  108:    avlInsert(avlTree, 1);
    %%%%%:  108-block  0
    #####:  109:    ASSERT_FALSE(avlEmpty(avlTree));
    %%%%%:  109-block  0
    %%%%%:  109-block  1
    %%%%%:  109-block  2
    %%%%%:  109-block  3
    %%%%%:  109-block  4
    %%%%%:  109-block  5
    $$$$$:  109-block  6
    $$$$$:  109-block  7
    $$$$$:  109-block  8
    $$$$$:  109-block  9
    $$$$$:  109-block 10
    $$$$$:  109-block 11
    $$$$$:  109-block 12
        -:  110:}
------------------
_ZN22AVL_Tree_avlEmpty_TestC2Ev:
    #####:  104:TEST(AVL_Tree, avlEmpty) {
    %%%%%:  104-block  0
------------------
        -:  111:
        -:  112://-------------------------------------------------------------------------------------------------------------------------------
        -:  113:
    #####:  114:TEST(AVL_Tree, avlSize) {
    #####:  115:    AVL_Tree *avlTree = avlInit();
    #####:  116:    std::vector<int> input = {0, 1, 1, 1, 3, 3, 4, 6, 7, 9};
    #####:  117:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:  118:    ASSERT_EQ(avlSize(avlTree), 7);
    #####:  119:    ASSERT_EQ(0, std::isnan(avlSize(NULL)));
        -:  120:}
------------------
_ZN21AVL_Tree_avlSize_Test8TestBodyEv:
    #####:  114:TEST(AVL_Tree, avlSize) {
    #####:  115:    AVL_Tree *avlTree = avlInit();
    %%%%%:  115-block  0
    #####:  116:    std::vector<int> input = {0, 1, 1, 1, 3, 3, 4, 6, 7, 9};
    %%%%%:  116-block  0
    $$$$$:  116-block  1
    $$$$$:  116-block  2
    $$$$$:  116-block  3
    #####:  117:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:  118:    ASSERT_EQ(avlSize(avlTree), 7);
    %%%%%:  118-block  0
    %%%%%:  118-block  1
    %%%%%:  118-block  2
    %%%%%:  118-block  3
    %%%%%:  118-block  4
    %%%%%:  118-block  5
    %%%%%:  118-block  6
    $$$$$:  118-block  7
    $$$$$:  118-block  8
    $$$$$:  118-block  9
    $$$$$:  118-block 10
    $$$$$:  118-block 11
    $$$$$:  118-block 12
    $$$$$:  118-block 13
    #####:  119:    ASSERT_EQ(0, std::isnan(avlSize(NULL)));
    %%%%%:  119-block  0
    %%%%%:  119-block  1
    %%%%%:  119-block  2
    %%%%%:  119-block  3
    %%%%%:  119-block  4
    %%%%%:  119-block  5
    %%%%%:  119-block  6
    $$$$$:  119-block  7
    $$$$$:  119-block  8
    $$$$$:  119-block  9
    $$$$$:  119-block 10
    $$$$$:  119-block 11
    $$$$$:  119-block 12
    $$$$$:  119-block 13
        -:  120:}
------------------
_ZN21AVL_Tree_avlSize_TestC2Ev:
    #####:  114:TEST(AVL_Tree, avlSize) {
    %%%%%:  114-block  0
------------------
        -:  121:
        -:  122://-------------------------------------------------------------------------------------------------------------------------------
        -:  123:
    #####:  124:TEST(AVL_Tree, avlEraseByValue1) {
    #####:  125:    AVL_Tree* avlTree = avlInit();
    #####:  126:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
    #####:  127:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:  128:    ASSERT_EQ(AVLERR_NULL_POINTER_ARG, avlEraseByValue(NULL, -1));
    #####:  129:    ASSERT_EQ(AVLERR_OK, avlEraseByValue(avlTree, -1));
    #####:  130:    ASSERT_EQ(AVLERR_OK, avlEraseByValue(avlTree, 1));
    #####:  131:    std::vector<int> res(6);
    #####:  132:    std::vector<int> trueRes = {0, 3, 4, 6, 7, 9};
    #####:  133:    avlSaveInArray(avlTree, res.data(), res.size());
    #####:  134:    ASSERT_EQ(res, trueRes);
        -:  135:}
------------------
_ZN30AVL_Tree_avlEraseByValue1_Test8TestBodyEv:
    #####:  124:TEST(AVL_Tree, avlEraseByValue1) {
    #####:  125:    AVL_Tree* avlTree = avlInit();
    %%%%%:  125-block  0
    #####:  126:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
    %%%%%:  126-block  0
    $$$$$:  126-block  1
    $$$$$:  126-block  2
    $$$$$:  126-block  3
    #####:  127:    avlLoadFromArray(avlTree, input.data(), input.size());
    #####:  128:    ASSERT_EQ(AVLERR_NULL_POINTER_ARG, avlEraseByValue(NULL, -1));
    %%%%%:  128-block  0
    %%%%%:  128-block  1
    %%%%%:  128-block  2
    %%%%%:  128-block  3
    %%%%%:  128-block  4
    %%%%%:  128-block  5
    %%%%%:  128-block  6
    $$$$$:  128-block  7
    $$$$$:  128-block  8
    $$$$$:  128-block  9
    $$$$$:  128-block 10
    $$$$$:  128-block 11
    $$$$$:  128-block 12
    $$$$$:  128-block 13
    #####:  129:    ASSERT_EQ(AVLERR_OK, avlEraseByValue(avlTree, -1));
    %%%%%:  129-block  0
    %%%%%:  129-block  1
    %%%%%:  129-block  2
    %%%%%:  129-block  3
    %%%%%:  129-block  4
    %%%%%:  129-block  5
    %%%%%:  129-block  6
    $$$$$:  129-block  7
    $$$$$:  129-block  8
    $$$$$:  129-block  9
    $$$$$:  129-block 10
    $$$$$:  129-block 11
    $$$$$:  129-block 12
    $$$$$:  129-block 13
    #####:  130:    ASSERT_EQ(AVLERR_OK, avlEraseByValue(avlTree, 1));
    %%%%%:  130-block  0
    %%%%%:  130-block  1
    %%%%%:  130-block  2
    %%%%%:  130-block  3
    %%%%%:  130-block  4
    %%%%%:  130-block  5
    %%%%%:  130-block  6
    $$$$$:  130-block  7
    $$$$$:  130-block  8
    $$$$$:  130-block  9
    $$$$$:  130-block 10
    $$$$$:  130-block 11
    $$$$$:  130-block 12
    $$$$$:  130-block 13
    #####:  131:    std::vector<int> res(6);
    %%%%%:  131-block  0
    $$$$$:  131-block  1
    $$$$$:  131-block  2
    #####:  132:    std::vector<int> trueRes = {0, 3, 4, 6, 7, 9};
    $$$$$:  132-block  0
    $$$$$:  132-block  1
    $$$$$:  132-block  2
    #####:  133:    avlSaveInArray(avlTree, res.data(), res.size());
    #####:  134:    ASSERT_EQ(res, trueRes);
    %%%%%:  134-block  0
    %%%%%:  134-block  1
    %%%%%:  134-block  2
    %%%%%:  134-block  3
    %%%%%:  134-block  4
    %%%%%:  134-block  5
    $$$$$:  134-block  6
    $$$$$:  134-block  7
    $$$$$:  134-block  8
    $$$$$:  134-block  9
    $$$$$:  134-block 10
        -:  135:}
------------------
_ZN30AVL_Tree_avlEraseByValue1_TestC2Ev:
    #####:  124:TEST(AVL_Tree, avlEraseByValue1) {
    %%%%%:  124-block  0
------------------
        -:  136:
        -:  137://-------------------------------------------------------------------------------------------------------------------------------
        -:  138:
    #####:  139:TEST(AVL_Tree, avlSaveInArray) {
    #####:  140:    AVL_Tree* avlTree = avlInit();
    #####:  141:    int arr[5] = {};
    #####:  142:    ASSERT_EQ(avlSaveInArray(NULL, NULL, 0), AVLERR_NOT_INIT);
    #####:  143:    ASSERT_EQ(avlSaveInArray(avlTree, arr, 0), AVLERR_OK);
    #####:  144:    ASSERT_EQ(avlSaveInArray(avlTree, NULL, 5), AVLERR_NULL_POINTER_ARG);
        -:  145:}
