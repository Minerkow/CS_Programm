        -:    0:Source:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/test/avlTests.cpp
        -:    0:Graph:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/cmake-build-debug/CMakeFiles/AVL_Tree_Test.dir/test/avlTests.gcno
        -:    0:Data:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/cmake-build-debug/CMakeFiles/AVL_Tree_Test.dir/test/avlTests.gcda
        -:    0:Runs:1
        -:    1:#include <gtest/gtest.h>
        -:    2:extern "C" {
        -:    3:#include "../headers/AVL_Tree.h"
        -:    4:#include "../headers/TestHelper.h"
        -:    5:}
        -:    6:
        2:    7:TEST(AVL_Tree, stressTest1) {
        1:    8:    AVL_Tree* avlTree = avlInit();
       1*:    9:    ASSERT_TRUE(!avlTree);
        1:   10:    avlClear(avlTree);
        -:   11:}
------------------
_ZN25AVL_Tree_stressTest1_Test8TestBodyEv:
        1:    7:TEST(AVL_Tree, stressTest1) {
        1:    8:    AVL_Tree* avlTree = avlInit();
        1:    8-block  0
       1*:    9:    ASSERT_TRUE(!avlTree);
    %%%%%:    9-block  0
    %%%%%:    9-block  1
    %%%%%:    9-block  2
    %%%%%:    9-block  3
    %%%%%:    9-block  4
    $$$$$:    9-block  5
    $$$$$:    9-block  6
    $$$$$:    9-block  7
    $$$$$:    9-block  8
    $$$$$:    9-block  9
    $$$$$:    9-block 10
    $$$$$:    9-block 11
        1:   10:    avlClear(avlTree);
        1:   10-block  0
        -:   11:}
------------------
_ZN25AVL_Tree_stressTest1_TestC2Ev:
        1:    7:TEST(AVL_Tree, stressTest1) {
        1:    7-block  0
------------------
        -:   12:
        2:   13:TEST(AVL_Tree, stressTest2) {
        1:   14:    AVL_Tree* avlTree = avlInit();
       1*:   15:    ASSERT_EQ(AVLERR_INSERT, avlInsert(avlTree, 1));
        1:   16:    avlClear(avlTree);
        -:   17:}
------------------
_ZN25AVL_Tree_stressTest2_Test8TestBodyEv:
        1:   13:TEST(AVL_Tree, stressTest2) {
        1:   14:    AVL_Tree* avlTree = avlInit();
        1:   14-block  0
       1*:   15:    ASSERT_EQ(AVLERR_INSERT, avlInsert(avlTree, 1));
        1:   15-block  0
        1:   15-block  1
    %%%%%:   15-block  2
    %%%%%:   15-block  3
    %%%%%:   15-block  4
    %%%%%:   15-block  5
    $$$$$:   15-block  6
    $$$$$:   15-block  7
    $$$$$:   15-block  8
    $$$$$:   15-block  9
    $$$$$:   15-block 10
    $$$$$:   15-block 11
    $$$$$:   15-block 12
        1:   16:    avlClear(avlTree);
        1:   16-block  0
        -:   17:}
------------------
_ZN25AVL_Tree_stressTest2_TestC2Ev:
        1:   13:TEST(AVL_Tree, stressTest2) {
        1:   13-block  0
------------------
        -:   18:
        2:   19:TEST(AVL_Tree, stressTest3) {
        1:   20:    AVL_Tree* avlTree = avlInit();
        1:   21:    avlInsert(avlTree, 1);
       1*:   22:    ASSERT_EQ(AVLERR_INSERT, avlInsert(avlTree, 2));
        1:   23:    avlClear(avlTree);
        -:   24:}
------------------
_ZN25AVL_Tree_stressTest3_Test8TestBodyEv:
        1:   19:TEST(AVL_Tree, stressTest3) {
        1:   20:    AVL_Tree* avlTree = avlInit();
        1:   20-block  0
        1:   21:    avlInsert(avlTree, 1);
       1*:   22:    ASSERT_EQ(AVLERR_INSERT, avlInsert(avlTree, 2));
        1:   22-block  0
        1:   22-block  1
    %%%%%:   22-block  2
    %%%%%:   22-block  3
    %%%%%:   22-block  4
    %%%%%:   22-block  5
    $$$$$:   22-block  6
    $$$$$:   22-block  7
    $$$$$:   22-block  8
    $$$$$:   22-block  9
    $$$$$:   22-block 10
    $$$$$:   22-block 11
    $$$$$:   22-block 12
        1:   23:    avlClear(avlTree);
        1:   23-block  0
        -:   24:}
------------------
_ZN25AVL_Tree_stressTest3_TestC2Ev:
        1:   19:TEST(AVL_Tree, stressTest3) {
        1:   19-block  0
------------------
        -:   25:
        2:   26:TEST(AVL_Tree, stressTest4) {
        1:   27:    AVL_Tree* avlTree = avlInit();
        1:   28:    int arr[] = {1};
       1*:   29:    ASSERT_EQ(AVLERR_INSERT, avlLoadFromArray(avlTree, arr, 1));
        1:   30:    avlClear(avlTree);
        -:   31:}
------------------
_ZN25AVL_Tree_stressTest4_Test8TestBodyEv:
        1:   26:TEST(AVL_Tree, stressTest4) {
        1:   27:    AVL_Tree* avlTree = avlInit();
        1:   27-block  0
        1:   28:    int arr[] = {1};
       1*:   29:    ASSERT_EQ(AVLERR_INSERT, avlLoadFromArray(avlTree, arr, 1));
        1:   29-block  0
        1:   29-block  1
        1:   29-block  2
    %%%%%:   29-block  3
    %%%%%:   29-block  4
    %%%%%:   29-block  5
    %%%%%:   29-block  6
    $$$$$:   29-block  7
    $$$$$:   29-block  8
    $$$$$:   29-block  9
    $$$$$:   29-block 10
    $$$$$:   29-block 11
    $$$$$:   29-block 12
    $$$$$:   29-block 13
        1:   30:    avlClear(avlTree);
        1:   30-block  0
        -:   31:}
------------------
_ZN25AVL_Tree_stressTest4_TestC2Ev:
        1:   26:TEST(AVL_Tree, stressTest4) {
        1:   26-block  0
------------------
        -:   32:
        -:   33:
        -:   34://---------------------------------------------------------------------------------------------------------------------------------------
        -:   35:
        2:   36:TEST(AVL_Tree, avlInsert1) {
        1:   37:    AVL_Tree* avlTree = avlInit();
        1:   38:    avlInsert(avlTree, 1);
       1*:   39:    ASSERT_EQ(avlGetMaxElem(avlTree), avlGetMinElem(avlTree));
        1:   40:    avlClear(avlTree);
        -:   41:}
------------------
_ZN24AVL_Tree_avlInsert1_Test8TestBodyEv:
        1:   36:TEST(AVL_Tree, avlInsert1) {
        1:   37:    AVL_Tree* avlTree = avlInit();
        1:   37-block  0
        1:   38:    avlInsert(avlTree, 1);
       1*:   39:    ASSERT_EQ(avlGetMaxElem(avlTree), avlGetMinElem(avlTree));
        1:   39-block  0
        1:   39-block  1
        1:   39-block  2
    %%%%%:   39-block  3
    %%%%%:   39-block  4
    %%%%%:   39-block  5
    %%%%%:   39-block  6
    $$$$$:   39-block  7
    $$$$$:   39-block  8
    $$$$$:   39-block  9
    $$$$$:   39-block 10
    $$$$$:   39-block 11
    $$$$$:   39-block 12
    $$$$$:   39-block 13
        1:   40:    avlClear(avlTree);
        1:   40-block  0
        -:   41:}
------------------
_ZN24AVL_Tree_avlInsert1_TestC2Ev:
        1:   36:TEST(AVL_Tree, avlInsert1) {
        1:   36-block  0
------------------
        -:   42:
        2:   43:TEST(AVL_Tree, avlInsert2) {
        1:   44:    int err = avlInsert(NULL, 1);
       1*:   45:    ASSERT_EQ(err, AVLERR_NOT_INIT);
        -:   46:}
------------------
_ZN24AVL_Tree_avlInsert2_Test8TestBodyEv:
        1:   43:TEST(AVL_Tree, avlInsert2) {
        1:   44:    int err = avlInsert(NULL, 1);
        1:   44-block  0
       1*:   45:    ASSERT_EQ(err, AVLERR_NOT_INIT);
        1:   45-block  0
        1:   45-block  1
    %%%%%:   45-block  2
    %%%%%:   45-block  3
    %%%%%:   45-block  4
    %%%%%:   45-block  5
    $$$$$:   45-block  6
    $$$$$:   45-block  7
    $$$$$:   45-block  8
    $$$$$:   45-block  9
    $$$$$:   45-block 10
    $$$$$:   45-block 11
        -:   46:}
------------------
_ZN24AVL_Tree_avlInsert2_TestC2Ev:
        1:   43:TEST(AVL_Tree, avlInsert2) {
        1:   43-block  0
------------------
        -:   47:
        -:   48://-----------------------------------------------------------------------------------------------------------------
        -:   49:
        2:   50:TEST(AVL_Tree, avlLoadFromArray1) {
        1:   51:    const size_t numNumbers = 100000;
        1:   52:    AVL_Tree* avlTree = avlInit();
        1:   53:    std::vector<int> input;
        1:   54:    std::set<int> garantSet;
        1:   55:    std::srand(std::time(0));
   100001:   56:    for (int i = 0; i < numNumbers; ++i) {
   100000:   57:        input.push_back(std::rand() % 10000000);
   100000:   58:        garantSet.insert(input.back());
   100000:   59:        avlInsert(avlTree, input.back());
        -:   60:    }
       1*:   61:    ASSERT_EQ(avlSize(avlTree), garantSet.size());
        1:   62:    std::vector<int> trueRes;
    99489:   63:    for (auto& it : garantSet) {
    99488:   64:        trueRes.push_back(it);
        -:   65:    }
        1:   66:    std::vector<int> res(trueRes.size());
        1:   67:    avlSaveInArray(avlTree, res.data(), avlSize(avlTree));
        -:   68:    //std::cout << std::endl;
        -:   69:    //avlPrintTree_(avlTree);
       1*:   70:    ASSERT_EQ(avlSize(avlTree), garantSet.size());
       1*:   71:    ASSERT_EQ(trueRes, res);
        1:   72:    avlClear(avlTree);
        -:   73:}
------------------
_ZN31AVL_Tree_avlLoadFromArray1_Test8TestBodyEv:
        1:   50:TEST(AVL_Tree, avlLoadFromArray1) {
        1:   51:    const size_t numNumbers = 100000;
        1:   52:    AVL_Tree* avlTree = avlInit();
        1:   52-block  0
        1:   53:    std::vector<int> input;
        1:   53-block  0
    $$$$$:   53-block  1
        1:   54:    std::set<int> garantSet;
    $$$$$:   54-block  0
        1:   55:    std::srand(std::time(0));
   100001:   56:    for (int i = 0; i < numNumbers; ++i) {
   100001:   56-block  0
   100000:   56-block  1
   100000:   57:        input.push_back(std::rand() % 10000000);
   100000:   57-block  0
    $$$$$:   57-block  1
   100000:   58:        garantSet.insert(input.back());
   100000:   58-block  0
   100000:   59:        avlInsert(avlTree, input.back());
   100000:   59-block  0
        -:   60:    }
       1*:   61:    ASSERT_EQ(avlSize(avlTree), garantSet.size());
        1:   61-block  0
        1:   61-block  1
        1:   61-block  2
    %%%%%:   61-block  3
    %%%%%:   61-block  4
    %%%%%:   61-block  5
    %%%%%:   61-block  6
    $$$$$:   61-block  7
    $$$$$:   61-block  8
    $$$$$:   61-block  9
    $$$$$:   61-block 10
    $$$$$:   61-block 11
    $$$$$:   61-block 12
    $$$$$:   61-block 13
        1:   62:    std::vector<int> trueRes;
        1:   62-block  0
    $$$$$:   62-block  1
    99489:   63:    for (auto& it : garantSet) {
    99489:   63-block  0
    99488:   63-block  1
    99488:   63-block  2
    99488:   64:        trueRes.push_back(it);
        -:   65:    }
        1:   66:    std::vector<int> res(trueRes.size());
        1:   66-block  0
    $$$$$:   66-block  1
    $$$$$:   66-block  2
        1:   67:    avlSaveInArray(avlTree, res.data(), avlSize(avlTree));
        1:   67-block  0
        -:   68:    //std::cout << std::endl;
        -:   69:    //avlPrintTree_(avlTree);
       1*:   70:    ASSERT_EQ(avlSize(avlTree), garantSet.size());
        1:   70-block  0
        1:   70-block  1
        1:   70-block  2
    %%%%%:   70-block  3
    %%%%%:   70-block  4
    %%%%%:   70-block  5
    %%%%%:   70-block  6
    $$$$$:   70-block  7
    $$$$$:   70-block  8
    $$$$$:   70-block  9
    $$$$$:   70-block 10
    $$$$$:   70-block 11
    $$$$$:   70-block 12
    $$$$$:   70-block 13
       1*:   71:    ASSERT_EQ(trueRes, res);
        1:   71-block  0
        1:   71-block  1
    %%%%%:   71-block  2
    %%%%%:   71-block  3
    %%%%%:   71-block  4
    %%%%%:   71-block  5
    $$$$$:   71-block  6
    $$$$$:   71-block  7
    $$$$$:   71-block  8
    $$$$$:   71-block  9
    $$$$$:   71-block 10
        1:   72:    avlClear(avlTree);
        1:   72-block  0
        -:   73:}
------------------
_ZN31AVL_Tree_avlLoadFromArray1_TestC2Ev:
        1:   50:TEST(AVL_Tree, avlLoadFromArray1) {
        1:   50-block  0
------------------
        -:   74:
        2:   75:TEST(AVL_Tree, avlLoadFromArrayStress) {
        1:   76:    AVL_Tree* avlTree = avlInit();
        1:   77:    std::vector<int> input = {27, 80, 8, 42, 37, 59, 90, 42, 90, 46, 92, 22, 18, 0, 99, 98, 92, 18, 16, 2, 45, 75, 30, 27, 23, 34, 50, 88, 53, 75, 73, 80, 7, 33, 22, 44, 92, 65, 86, 82};
        1:   78:    std::vector<int> trueRes = {0, 2, 7, 8, 16, 18, 22, 23, 27, 30, 33, 34, 37, 42, 44, 45, 46, 50, 53, 59, 65, 73, 75, 80, 82, 86, 88, 90, 92, 98, 99};
        1:   79:    std::vector<int> res(trueRes.size());
        1:   80:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:   81:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:   82:    ASSERT_EQ(trueRes, res);
        1:   83:    avlClear(avlTree);
        -:   84:}
------------------
_ZN36AVL_Tree_avlLoadFromArrayStress_Test8TestBodyEv:
        1:   75:TEST(AVL_Tree, avlLoadFromArrayStress) {
        1:   76:    AVL_Tree* avlTree = avlInit();
        1:   76-block  0
        1:   77:    std::vector<int> input = {27, 80, 8, 42, 37, 59, 90, 42, 90, 46, 92, 22, 18, 0, 99, 98, 92, 18, 16, 2, 45, 75, 30, 27, 23, 34, 50, 88, 53, 75, 73, 80, 7, 33, 22, 44, 92, 65, 86, 82};
        1:   77-block  0
    $$$$$:   77-block  1
    $$$$$:   77-block  2
    $$$$$:   77-block  3
        1:   78:    std::vector<int> trueRes = {0, 2, 7, 8, 16, 18, 22, 23, 27, 30, 33, 34, 37, 42, 44, 45, 46, 50, 53, 59, 65, 73, 75, 80, 82, 86, 88, 90, 92, 98, 99};
    $$$$$:   78-block  0
    $$$$$:   78-block  1
    $$$$$:   78-block  2
        1:   79:    std::vector<int> res(trueRes.size());
    $$$$$:   79-block  0
    $$$$$:   79-block  1
        1:   80:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:   81:    avlSaveInArray(avlTree, res.data(), res.size());
        1:   81-block  0
       1*:   82:    ASSERT_EQ(trueRes, res);
        1:   82-block  0
        1:   82-block  1
    %%%%%:   82-block  2
    %%%%%:   82-block  3
    %%%%%:   82-block  4
    %%%%%:   82-block  5
    $$$$$:   82-block  6
    $$$$$:   82-block  7
    $$$$$:   82-block  8
    $$$$$:   82-block  9
    $$$$$:   82-block 10
        1:   83:    avlClear(avlTree);
        1:   83-block  0
        -:   84:}
------------------
_ZN36AVL_Tree_avlLoadFromArrayStress_TestC2Ev:
        1:   75:TEST(AVL_Tree, avlLoadFromArrayStress) {
        1:   75-block  0
------------------
        -:   85:
        2:   86:TEST(AVL_Tree, avlLoadFromArray2) {
        1:   87:    AVL_Tree* avlTree = avlInit();
        1:   88:    std::vector<int> input = {1, 2, 3, 4, 2};
        1:   89:    std::vector<int> trueRes = {1, 2, 3, 4};
        1:   90:    std::vector<int> res(trueRes.size());
        1:   91:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:   92:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:   93:    ASSERT_EQ(trueRes.size(), avlSize(avlTree));
       1*:   94:    ASSERT_EQ(trueRes, res);
        1:   95:    avlClear(avlTree);
        -:   96:}
------------------
_ZN31AVL_Tree_avlLoadFromArray2_Test8TestBodyEv:
        1:   86:TEST(AVL_Tree, avlLoadFromArray2) {
        1:   87:    AVL_Tree* avlTree = avlInit();
        1:   87-block  0
        1:   88:    std::vector<int> input = {1, 2, 3, 4, 2};
        1:   88-block  0
    $$$$$:   88-block  1
    $$$$$:   88-block  2
    $$$$$:   88-block  3
        1:   89:    std::vector<int> trueRes = {1, 2, 3, 4};
    $$$$$:   89-block  0
    $$$$$:   89-block  1
    $$$$$:   89-block  2
        1:   90:    std::vector<int> res(trueRes.size());
    $$$$$:   90-block  0
    $$$$$:   90-block  1
        1:   91:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:   92:    avlSaveInArray(avlTree, res.data(), res.size());
        1:   92-block  0
       1*:   93:    ASSERT_EQ(trueRes.size(), avlSize(avlTree));
        1:   93-block  0
        1:   93-block  1
        1:   93-block  2
    %%%%%:   93-block  3
    %%%%%:   93-block  4
    %%%%%:   93-block  5
    %%%%%:   93-block  6
    $$$$$:   93-block  7
    $$$$$:   93-block  8
    $$$$$:   93-block  9
    $$$$$:   93-block 10
    $$$$$:   93-block 11
    $$$$$:   93-block 12
    $$$$$:   93-block 13
       1*:   94:    ASSERT_EQ(trueRes, res);
        1:   94-block  0
        1:   94-block  1
    %%%%%:   94-block  2
    %%%%%:   94-block  3
    %%%%%:   94-block  4
    %%%%%:   94-block  5
    $$$$$:   94-block  6
    $$$$$:   94-block  7
    $$$$$:   94-block  8
    $$$$$:   94-block  9
    $$$$$:   94-block 10
        1:   95:    avlClear(avlTree);
        1:   95-block  0
        -:   96:}
------------------
_ZN31AVL_Tree_avlLoadFromArray2_TestC2Ev:
        1:   86:TEST(AVL_Tree, avlLoadFromArray2) {
        1:   86-block  0
------------------
        -:   97:
        2:   98:TEST(AVL_Tree, avlLoadFromArray3) {
        1:   99:    AVL_Tree* avlTree = avlInit();
        1:  100:    std::vector<int> input = { 0, 1, 3};
        1:  101:    std::vector<int> trueRes = { 0, 1, 3};
        1:  102:    std::vector<int> res(trueRes.size());
        1:  103:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  104:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  105:    ASSERT_EQ(trueRes, res);
        1:  106:    avlClear(avlTree);
        -:  107:}
------------------
_ZN31AVL_Tree_avlLoadFromArray3_Test8TestBodyEv:
        1:   98:TEST(AVL_Tree, avlLoadFromArray3) {
        1:   99:    AVL_Tree* avlTree = avlInit();
        1:   99-block  0
        1:  100:    std::vector<int> input = { 0, 1, 3};
        1:  100-block  0
    $$$$$:  100-block  1
    $$$$$:  100-block  2
    $$$$$:  100-block  3
        1:  101:    std::vector<int> trueRes = { 0, 1, 3};
    $$$$$:  101-block  0
    $$$$$:  101-block  1
    $$$$$:  101-block  2
        1:  102:    std::vector<int> res(trueRes.size());
    $$$$$:  102-block  0
    $$$$$:  102-block  1
        1:  103:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  104:    avlSaveInArray(avlTree, res.data(), res.size());
        1:  104-block  0
       1*:  105:    ASSERT_EQ(trueRes, res);
        1:  105-block  0
        1:  105-block  1
    %%%%%:  105-block  2
    %%%%%:  105-block  3
    %%%%%:  105-block  4
    %%%%%:  105-block  5
    $$$$$:  105-block  6
    $$$$$:  105-block  7
    $$$$$:  105-block  8
    $$$$$:  105-block  9
    $$$$$:  105-block 10
        1:  106:    avlClear(avlTree);
        1:  106-block  0
        -:  107:}
------------------
_ZN31AVL_Tree_avlLoadFromArray3_TestC2Ev:
        1:   98:TEST(AVL_Tree, avlLoadFromArray3) {
        1:   98-block  0
------------------
        -:  108:
        2:  109:TEST(AVL_Tree, avlLoadFromArray4) {
        1:  110:    AVL_Tree* avlTree = avlInit();
        1:  111:    std::vector<int> input = { 0, 1, 1, 1, 3, 3, 4, 6, 7, 9 };
        1:  112:    std::vector<int> trueRes = { 0, 1, 3, 4, 6, 7, 9 };
        1:  113:    std::vector<int> res(trueRes.size());
        1:  114:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  115:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  116:    ASSERT_EQ(trueRes, res);
        1:  117:    avlClear(avlTree);
        -:  118:}
------------------
_ZN31AVL_Tree_avlLoadFromArray4_Test8TestBodyEv:
        1:  109:TEST(AVL_Tree, avlLoadFromArray4) {
        1:  110:    AVL_Tree* avlTree = avlInit();
        1:  110-block  0
        1:  111:    std::vector<int> input = { 0, 1, 1, 1, 3, 3, 4, 6, 7, 9 };
        1:  111-block  0
    $$$$$:  111-block  1
    $$$$$:  111-block  2
    $$$$$:  111-block  3
        1:  112:    std::vector<int> trueRes = { 0, 1, 3, 4, 6, 7, 9 };
    $$$$$:  112-block  0
    $$$$$:  112-block  1
    $$$$$:  112-block  2
        1:  113:    std::vector<int> res(trueRes.size());
    $$$$$:  113-block  0
    $$$$$:  113-block  1
        1:  114:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  115:    avlSaveInArray(avlTree, res.data(), res.size());
        1:  115-block  0
       1*:  116:    ASSERT_EQ(trueRes, res);
        1:  116-block  0
        1:  116-block  1
    %%%%%:  116-block  2
    %%%%%:  116-block  3
    %%%%%:  116-block  4
    %%%%%:  116-block  5
    $$$$$:  116-block  6
    $$$$$:  116-block  7
    $$$$$:  116-block  8
    $$$$$:  116-block  9
    $$$$$:  116-block 10
        1:  117:    avlClear(avlTree);
        1:  117-block  0
        -:  118:}
------------------
_ZN31AVL_Tree_avlLoadFromArray4_TestC2Ev:
        1:  109:TEST(AVL_Tree, avlLoadFromArray4) {
        1:  109-block  0
------------------
        -:  119:
        2:  120:TEST(AVL_Tree, avlLoadFromArray5) {
        1:  121:    AVL_Tree* avlTree = avlInit();
        -:  122:    int arr[5];
       1*:  123:    ASSERT_EQ(AVLERR_NULL_POINTER_ARG, avlLoadFromArray(avlTree, NULL, 1));
       1*:  124:    ASSERT_EQ(AVLERR_NOT_INIT, avlLoadFromArray(NULL, arr, 5));
       1*:  125:    ASSERT_EQ(AVLERR_OK, avlLoadFromArray(avlTree, arr, 0));
        1:  126:    avlClear(avlTree);
        -:  127:}
------------------
_ZN31AVL_Tree_avlLoadFromArray5_Test8TestBodyEv:
        1:  120:TEST(AVL_Tree, avlLoadFromArray5) {
        1:  121:    AVL_Tree* avlTree = avlInit();
        1:  121-block  0
        -:  122:    int arr[5];
       1*:  123:    ASSERT_EQ(AVLERR_NULL_POINTER_ARG, avlLoadFromArray(avlTree, NULL, 1));
        1:  123-block  0
        1:  123-block  1
        1:  123-block  2
    %%%%%:  123-block  3
    %%%%%:  123-block  4
    %%%%%:  123-block  5
    %%%%%:  123-block  6
    $$$$$:  123-block  7
    $$$$$:  123-block  8
    $$$$$:  123-block  9
    $$$$$:  123-block 10
    $$$$$:  123-block 11
    $$$$$:  123-block 12
    $$$$$:  123-block 13
       1*:  124:    ASSERT_EQ(AVLERR_NOT_INIT, avlLoadFromArray(NULL, arr, 5));
        1:  124-block  0
        1:  124-block  1
        1:  124-block  2
    %%%%%:  124-block  3
    %%%%%:  124-block  4
    %%%%%:  124-block  5
    %%%%%:  124-block  6
    $$$$$:  124-block  7
    $$$$$:  124-block  8
    $$$$$:  124-block  9
    $$$$$:  124-block 10
    $$$$$:  124-block 11
    $$$$$:  124-block 12
    $$$$$:  124-block 13
       1*:  125:    ASSERT_EQ(AVLERR_OK, avlLoadFromArray(avlTree, arr, 0));
        1:  125-block  0
        1:  125-block  1
        1:  125-block  2
    %%%%%:  125-block  3
    %%%%%:  125-block  4
    %%%%%:  125-block  5
    %%%%%:  125-block  6
    $$$$$:  125-block  7
    $$$$$:  125-block  8
    $$$$$:  125-block  9
    $$$$$:  125-block 10
    $$$$$:  125-block 11
    $$$$$:  125-block 12
    $$$$$:  125-block 13
        1:  126:    avlClear(avlTree);
        1:  126-block  0
        -:  127:}
------------------
_ZN31AVL_Tree_avlLoadFromArray5_TestC2Ev:
        1:  120:TEST(AVL_Tree, avlLoadFromArray5) {
        1:  120-block  0
------------------
        -:  128:
        2:  129:TEST(AVL_Tree, avlLoadFromArray6) {
        1:  130:    AVL_Tree *avlTree = avlInit();
        2:  131:    std::vector<int> input = {0, 1, 3, 4, 6, 7, 9};
        1:  132:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  133:    avlClear(avlTree);
        1:  134:}
------------------
_ZN31AVL_Tree_avlLoadFromArray6_Test8TestBodyEv:
        1:  129:TEST(AVL_Tree, avlLoadFromArray6) {
        1:  130:    AVL_Tree *avlTree = avlInit();
        1:  130-block  0
        2:  131:    std::vector<int> input = {0, 1, 3, 4, 6, 7, 9};
        1:  131-block  0
        1:  131-block  1
    $$$$$:  131-block  2
    $$$$$:  131-block  3
    $$$$$:  131-block  4
        1:  132:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  133:    avlClear(avlTree);
        1:  133-block  0
        1:  134:}
------------------
_ZN31AVL_Tree_avlLoadFromArray6_TestC2Ev:
        1:  129:TEST(AVL_Tree, avlLoadFromArray6) {
        1:  129-block  0
------------------
        -:  135:
        -:  136://-------------------------------------------------------------------------------------------------------------------------------
        -:  137:
        2:  138:TEST(AVL_Tree, avlIsEmpty) {
        1:  139:    AVL_Tree* avlTree = avlInit();
       1*:  140:    ASSERT_TRUE(avlIsEmpty(avlTree));
       1*:  141:    ASSERT_TRUE(avlIsEmpty(NULL));
        1:  142:    avlInsert(avlTree, 1);
       1*:  143:    ASSERT_FALSE(avlIsEmpty(avlTree));
        1:  144:    avlClear(avlTree);
        -:  145:}
------------------
_ZN24AVL_Tree_avlIsEmpty_Test8TestBodyEv:
        1:  138:TEST(AVL_Tree, avlIsEmpty) {
        1:  139:    AVL_Tree* avlTree = avlInit();
        1:  139-block  0
       1*:  140:    ASSERT_TRUE(avlIsEmpty(avlTree));
        1:  140-block  0
    %%%%%:  140-block  1
    %%%%%:  140-block  2
    %%%%%:  140-block  3
    %%%%%:  140-block  4
    %%%%%:  140-block  5
    $$$$$:  140-block  6
    $$$$$:  140-block  7
    $$$$$:  140-block  8
    $$$$$:  140-block  9
    $$$$$:  140-block 10
    $$$$$:  140-block 11
    $$$$$:  140-block 12
       1*:  141:    ASSERT_TRUE(avlIsEmpty(NULL));
        1:  141-block  0
        1:  141-block  1
    %%%%%:  141-block  2
    %%%%%:  141-block  3
    %%%%%:  141-block  4
    %%%%%:  141-block  5
    %%%%%:  141-block  6
    $$$$$:  141-block  7
    $$$$$:  141-block  8
    $$$$$:  141-block  9
    $$$$$:  141-block 10
    $$$$$:  141-block 11
    $$$$$:  141-block 12
    $$$$$:  141-block 13
        1:  142:    avlInsert(avlTree, 1);
        1:  142-block  0
       1*:  143:    ASSERT_FALSE(avlIsEmpty(avlTree));
        1:  143-block  0
    %%%%%:  143-block  1
    %%%%%:  143-block  2
    %%%%%:  143-block  3
    %%%%%:  143-block  4
    %%%%%:  143-block  5
    $$$$$:  143-block  6
    $$$$$:  143-block  7
    $$$$$:  143-block  8
    $$$$$:  143-block  9
    $$$$$:  143-block 10
    $$$$$:  143-block 11
    $$$$$:  143-block 12
        1:  144:    avlClear(avlTree);
        1:  144-block  0
        -:  145:}
------------------
_ZN24AVL_Tree_avlIsEmpty_TestC2Ev:
        1:  138:TEST(AVL_Tree, avlIsEmpty) {
        1:  138-block  0
------------------
        -:  146:
        -:  147://-------------------------------------------------------------------------------------------------------------------------------
        -:  148:
        2:  149:TEST(AVL_Tree, avlSize) {
        1:  150:    AVL_Tree *avlTree = avlInit();
        1:  151:    std::vector<int> input = {0, 1, 1, 1, 3, 3, 4, 6, 7, 9};
        1:  152:    avlLoadFromArray(avlTree, input.data(), input.size());
       1*:  153:    ASSERT_EQ(avlSize(avlTree), 7);
       1*:  154:    ASSERT_EQ(0, std::isnan(avlSize(NULL)));
        1:  155:    avlClear(avlTree);
        -:  156:}
------------------
_ZN21AVL_Tree_avlSize_Test8TestBodyEv:
        1:  149:TEST(AVL_Tree, avlSize) {
        1:  150:    AVL_Tree *avlTree = avlInit();
        1:  150-block  0
        1:  151:    std::vector<int> input = {0, 1, 1, 1, 3, 3, 4, 6, 7, 9};
        1:  151-block  0
    $$$$$:  151-block  1
    $$$$$:  151-block  2
    $$$$$:  151-block  3
        1:  152:    avlLoadFromArray(avlTree, input.data(), input.size());
       1*:  153:    ASSERT_EQ(avlSize(avlTree), 7);
        1:  153-block  0
        1:  153-block  1
        1:  153-block  2
    %%%%%:  153-block  3
    %%%%%:  153-block  4
    %%%%%:  153-block  5
    %%%%%:  153-block  6
    $$$$$:  153-block  7
    $$$$$:  153-block  8
    $$$$$:  153-block  9
    $$$$$:  153-block 10
    $$$$$:  153-block 11
    $$$$$:  153-block 12
    $$$$$:  153-block 13
       1*:  154:    ASSERT_EQ(0, std::isnan(avlSize(NULL)));
        1:  154-block  0
        1:  154-block  1
        1:  154-block  2
    %%%%%:  154-block  3
    %%%%%:  154-block  4
    %%%%%:  154-block  5
    %%%%%:  154-block  6
    $$$$$:  154-block  7
    $$$$$:  154-block  8
    $$$$$:  154-block  9
    $$$$$:  154-block 10
    $$$$$:  154-block 11
    $$$$$:  154-block 12
    $$$$$:  154-block 13
        1:  155:    avlClear(avlTree);
        1:  155-block  0
        -:  156:}
------------------
_ZN21AVL_Tree_avlSize_TestC2Ev:
        1:  149:TEST(AVL_Tree, avlSize) {
        1:  149-block  0
------------------
        -:  157:
        -:  158://-------------------------------------------------------------------------------------------------------------------------------
        -:  159:
        2:  160:TEST(AVL_Tree, avlEraseByValue1) {
        1:  161:    AVL_Tree* avlTree = avlInit();
        1:  162:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
        1:  163:    avlLoadFromArray(avlTree, input.data(), input.size());
       1*:  164:    ASSERT_EQ(AVLERR_NULL_POINTER_ARG, avlEraseByValue(NULL, -1));
       1*:  165:    ASSERT_EQ(AVLERR_OK, avlEraseByValue(avlTree, -1));
       1*:  166:    ASSERT_EQ(AVLERR_OK, avlEraseByValue(avlTree, 1));
        1:  167:    std::vector<int> res(6);
        1:  168:    std::vector<int> trueRes = {0, 3, 4, 6, 7, 9};
        1:  169:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  170:    ASSERT_EQ(res, trueRes);
        1:  171:    avlClear(avlTree);
        -:  172:}
------------------
_ZN30AVL_Tree_avlEraseByValue1_Test8TestBodyEv:
        1:  160:TEST(AVL_Tree, avlEraseByValue1) {
        1:  161:    AVL_Tree* avlTree = avlInit();
        1:  161-block  0
        1:  162:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
        1:  162-block  0
    $$$$$:  162-block  1
    $$$$$:  162-block  2
    $$$$$:  162-block  3
        1:  163:    avlLoadFromArray(avlTree, input.data(), input.size());
       1*:  164:    ASSERT_EQ(AVLERR_NULL_POINTER_ARG, avlEraseByValue(NULL, -1));
        1:  164-block  0
        1:  164-block  1
        1:  164-block  2
    %%%%%:  164-block  3
    %%%%%:  164-block  4
    %%%%%:  164-block  5
    %%%%%:  164-block  6
    $$$$$:  164-block  7
    $$$$$:  164-block  8
    $$$$$:  164-block  9
    $$$$$:  164-block 10
    $$$$$:  164-block 11
    $$$$$:  164-block 12
    $$$$$:  164-block 13
       1*:  165:    ASSERT_EQ(AVLERR_OK, avlEraseByValue(avlTree, -1));
        1:  165-block  0
        1:  165-block  1
        1:  165-block  2
    %%%%%:  165-block  3
    %%%%%:  165-block  4
    %%%%%:  165-block  5
    %%%%%:  165-block  6
    $$$$$:  165-block  7
    $$$$$:  165-block  8
    $$$$$:  165-block  9
    $$$$$:  165-block 10
    $$$$$:  165-block 11
    $$$$$:  165-block 12
    $$$$$:  165-block 13
       1*:  166:    ASSERT_EQ(AVLERR_OK, avlEraseByValue(avlTree, 1));
        1:  166-block  0
        1:  166-block  1
        1:  166-block  2
    %%%%%:  166-block  3
    %%%%%:  166-block  4
    %%%%%:  166-block  5
    %%%%%:  166-block  6
    $$$$$:  166-block  7
    $$$$$:  166-block  8
    $$$$$:  166-block  9
    $$$$$:  166-block 10
    $$$$$:  166-block 11
    $$$$$:  166-block 12
    $$$$$:  166-block 13
        1:  167:    std::vector<int> res(6);
        1:  167-block  0
    $$$$$:  167-block  1
    $$$$$:  167-block  2
        1:  168:    std::vector<int> trueRes = {0, 3, 4, 6, 7, 9};
    $$$$$:  168-block  0
    $$$$$:  168-block  1
    $$$$$:  168-block  2
        1:  169:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  170:    ASSERT_EQ(res, trueRes);
        1:  170-block  0
        1:  170-block  1
    %%%%%:  170-block  2
    %%%%%:  170-block  3
    %%%%%:  170-block  4
    %%%%%:  170-block  5
    $$$$$:  170-block  6
    $$$$$:  170-block  7
    $$$$$:  170-block  8
    $$$$$:  170-block  9
    $$$$$:  170-block 10
        1:  171:    avlClear(avlTree);
        1:  171-block  0
        -:  172:}
------------------
_ZN30AVL_Tree_avlEraseByValue1_TestC2Ev:
        1:  160:TEST(AVL_Tree, avlEraseByValue1) {
        1:  160-block  0
------------------
        -:  173:
        2:  174:TEST(AVL_Tree, avlEraseByValue2) {
        1:  175:    AVL_Tree* avlTree = avlInit();
        1:  176:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
        1:  177:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  178:    avlEraseByValue(avlTree, 1);
        1:  179:    std::vector<int> res(6);
        1:  180:    std::vector<int> trueRes = {0, 3, 4, 6, 7, 9 };
        1:  181:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  182:    ASSERT_EQ(res, trueRes);
        1:  183:    avlClear(avlTree);
        -:  184:}
------------------
_ZN30AVL_Tree_avlEraseByValue2_Test8TestBodyEv:
        1:  174:TEST(AVL_Tree, avlEraseByValue2) {
        1:  175:    AVL_Tree* avlTree = avlInit();
        1:  175-block  0
        1:  176:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
        1:  176-block  0
    $$$$$:  176-block  1
    $$$$$:  176-block  2
    $$$$$:  176-block  3
        1:  177:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  178:    avlEraseByValue(avlTree, 1);
        1:  178-block  0
        1:  179:    std::vector<int> res(6);
        1:  179-block  0
    $$$$$:  179-block  1
    $$$$$:  179-block  2
        1:  180:    std::vector<int> trueRes = {0, 3, 4, 6, 7, 9 };
    $$$$$:  180-block  0
    $$$$$:  180-block  1
    $$$$$:  180-block  2
        1:  181:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  182:    ASSERT_EQ(res, trueRes);
        1:  182-block  0
        1:  182-block  1
    %%%%%:  182-block  2
    %%%%%:  182-block  3
    %%%%%:  182-block  4
    %%%%%:  182-block  5
    $$$$$:  182-block  6
    $$$$$:  182-block  7
    $$$$$:  182-block  8
    $$$$$:  182-block  9
    $$$$$:  182-block 10
        1:  183:    avlClear(avlTree);
        1:  183-block  0
        -:  184:}
------------------
_ZN30AVL_Tree_avlEraseByValue2_TestC2Ev:
        1:  174:TEST(AVL_Tree, avlEraseByValue2) {
        1:  174-block  0
------------------
        -:  185:
        2:  186:TEST(AVL_Tree, avlEraseByValue3) {
        1:  187:    AVL_Tree* avlTree = avlInit();
        1:  188:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
        1:  189:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  190:    avlEraseByValue(avlTree, 3);
        1:  191:    std::vector<int> res(6);
        1:  192:    std::vector<int> trueRes = {0, 1, 4, 6, 7, 9 };
        1:  193:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  194:    ASSERT_EQ(res, trueRes);
        1:  195:    avlClear(avlTree);
        -:  196:}
------------------
_ZN30AVL_Tree_avlEraseByValue3_Test8TestBodyEv:
        1:  186:TEST(AVL_Tree, avlEraseByValue3) {
        1:  187:    AVL_Tree* avlTree = avlInit();
        1:  187-block  0
        1:  188:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
        1:  188-block  0
    $$$$$:  188-block  1
    $$$$$:  188-block  2
    $$$$$:  188-block  3
        1:  189:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  190:    avlEraseByValue(avlTree, 3);
        1:  190-block  0
        1:  191:    std::vector<int> res(6);
        1:  191-block  0
    $$$$$:  191-block  1
    $$$$$:  191-block  2
        1:  192:    std::vector<int> trueRes = {0, 1, 4, 6, 7, 9 };
    $$$$$:  192-block  0
    $$$$$:  192-block  1
    $$$$$:  192-block  2
        1:  193:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  194:    ASSERT_EQ(res, trueRes);
        1:  194-block  0
        1:  194-block  1
    %%%%%:  194-block  2
    %%%%%:  194-block  3
    %%%%%:  194-block  4
    %%%%%:  194-block  5
    $$$$$:  194-block  6
    $$$$$:  194-block  7
    $$$$$:  194-block  8
    $$$$$:  194-block  9
    $$$$$:  194-block 10
        1:  195:    avlClear(avlTree);
        1:  195-block  0
        -:  196:}
------------------
_ZN30AVL_Tree_avlEraseByValue3_TestC2Ev:
        1:  186:TEST(AVL_Tree, avlEraseByValue3) {
        1:  186-block  0
------------------
        -:  197:
        2:  198:TEST(AVL_Tree, avlEraseByValue4) {
        1:  199:    AVL_Tree* avlTree = avlInit();
        1:  200:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
        1:  201:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  202:    avlEraseByValue(avlTree, 4);
        1:  203:    std::vector<int> res(6);
        1:  204:    std::vector<int> trueRes = {0, 1, 3, 6, 7, 9 };
        1:  205:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  206:    ASSERT_EQ(res, trueRes);
        1:  207:    avlClear(avlTree);
        -:  208:}
------------------
_ZN30AVL_Tree_avlEraseByValue4_Test8TestBodyEv:
        1:  198:TEST(AVL_Tree, avlEraseByValue4) {
        1:  199:    AVL_Tree* avlTree = avlInit();
        1:  199-block  0
        1:  200:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
        1:  200-block  0
    $$$$$:  200-block  1
    $$$$$:  200-block  2
    $$$$$:  200-block  3
        1:  201:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  202:    avlEraseByValue(avlTree, 4);
        1:  202-block  0
        1:  203:    std::vector<int> res(6);
        1:  203-block  0
    $$$$$:  203-block  1
    $$$$$:  203-block  2
        1:  204:    std::vector<int> trueRes = {0, 1, 3, 6, 7, 9 };
    $$$$$:  204-block  0
    $$$$$:  204-block  1
    $$$$$:  204-block  2
        1:  205:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  206:    ASSERT_EQ(res, trueRes);
        1:  206-block  0
        1:  206-block  1
    %%%%%:  206-block  2
    %%%%%:  206-block  3
    %%%%%:  206-block  4
    %%%%%:  206-block  5
    $$$$$:  206-block  6
    $$$$$:  206-block  7
    $$$$$:  206-block  8
    $$$$$:  206-block  9
    $$$$$:  206-block 10
        1:  207:    avlClear(avlTree);
        1:  207-block  0
        -:  208:}
------------------
_ZN30AVL_Tree_avlEraseByValue4_TestC2Ev:
        1:  198:TEST(AVL_Tree, avlEraseByValue4) {
        1:  198-block  0
------------------
        -:  209:
        2:  210:TEST(AVL_Tree, avlEraseByValue5) {
        1:  211:    AVL_Tree* avlTree = avlInit();
        1:  212:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
        1:  213:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  214:    avlEraseByValue(avlTree, 6);
        1:  215:    std::vector<int> res(6);
        1:  216:    std::vector<int> trueRes = {0, 1, 3, 4, 7, 9 };
        1:  217:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  218:    ASSERT_EQ(res, trueRes);
        1:  219:    avlClear(avlTree);
        -:  220:}
------------------
_ZN30AVL_Tree_avlEraseByValue5_Test8TestBodyEv:
        1:  210:TEST(AVL_Tree, avlEraseByValue5) {
        1:  211:    AVL_Tree* avlTree = avlInit();
        1:  211-block  0
        1:  212:    std::vector<int> input = { 0, 1, 3, 4, 6, 7, 9 };
        1:  212-block  0
    $$$$$:  212-block  1
    $$$$$:  212-block  2
    $$$$$:  212-block  3
        1:  213:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  214:    avlEraseByValue(avlTree, 6);
        1:  214-block  0
        1:  215:    std::vector<int> res(6);
        1:  215-block  0
    $$$$$:  215-block  1
    $$$$$:  215-block  2
        1:  216:    std::vector<int> trueRes = {0, 1, 3, 4, 7, 9 };
    $$$$$:  216-block  0
    $$$$$:  216-block  1
    $$$$$:  216-block  2
        1:  217:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  218:    ASSERT_EQ(res, trueRes);
        1:  218-block  0
        1:  218-block  1
    %%%%%:  218-block  2
    %%%%%:  218-block  3
    %%%%%:  218-block  4
    %%%%%:  218-block  5
    $$$$$:  218-block  6
    $$$$$:  218-block  7
    $$$$$:  218-block  8
    $$$$$:  218-block  9
    $$$$$:  218-block 10
        1:  219:    avlClear(avlTree);
        1:  219-block  0
        -:  220:}
------------------
_ZN30AVL_Tree_avlEraseByValue5_TestC2Ev:
        1:  210:TEST(AVL_Tree, avlEraseByValue5) {
        1:  210-block  0
------------------
        -:  221:
        2:  222:TEST(AVL_Tree, avlEraseByValue6) {
        1:  223:    AVL_Tree* avlTree = avlInit();
        1:  224:    std::vector<int> input = { 0};
        1:  225:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  226:    avlEraseByValue(avlTree, 0);
       1*:  227:    ASSERT_TRUE(avlIsEmpty(avlTree));
        1:  228:    avlClear(avlTree);
        -:  229:}
------------------
_ZN30AVL_Tree_avlEraseByValue6_Test8TestBodyEv:
        1:  222:TEST(AVL_Tree, avlEraseByValue6) {
        1:  223:    AVL_Tree* avlTree = avlInit();
        1:  223-block  0
        1:  224:    std::vector<int> input = { 0};
        1:  224-block  0
    $$$$$:  224-block  1
    $$$$$:  224-block  2
    $$$$$:  224-block  3
        1:  225:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  226:    avlEraseByValue(avlTree, 0);
        1:  226-block  0
       1*:  227:    ASSERT_TRUE(avlIsEmpty(avlTree));
        1:  227-block  0
        1:  227-block  1
    %%%%%:  227-block  2
    %%%%%:  227-block  3
    %%%%%:  227-block  4
    %%%%%:  227-block  5
    %%%%%:  227-block  6
    $$$$$:  227-block  7
    $$$$$:  227-block  8
    $$$$$:  227-block  9
    $$$$$:  227-block 10
    $$$$$:  227-block 11
    $$$$$:  227-block 12
    $$$$$:  227-block 13
        1:  228:    avlClear(avlTree);
        1:  228-block  0
        -:  229:}
------------------
_ZN30AVL_Tree_avlEraseByValue6_TestC2Ev:
        1:  222:TEST(AVL_Tree, avlEraseByValue6) {
        1:  222-block  0
------------------
        -:  230:
        2:  231:TEST(AVL_Tree, avlEraseByValue7) {
        1:  232:    AVL_Tree* avlTree = avlInit();
        1:  233:    std::vector<int> input = { 0, 1};
        1:  234:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  235:    avlEraseByValue(avlTree, 0);
        1:  236:    std::vector<int> res(1);
        1:  237:    std::vector<int> trueRes = {1};
        1:  238:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  239:    ASSERT_EQ(res, trueRes);
        1:  240:    avlClear(avlTree);
        -:  241:}
------------------
_ZN30AVL_Tree_avlEraseByValue7_Test8TestBodyEv:
        1:  231:TEST(AVL_Tree, avlEraseByValue7) {
        1:  232:    AVL_Tree* avlTree = avlInit();
        1:  232-block  0
        1:  233:    std::vector<int> input = { 0, 1};
        1:  233-block  0
    $$$$$:  233-block  1
    $$$$$:  233-block  2
    $$$$$:  233-block  3
        1:  234:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  235:    avlEraseByValue(avlTree, 0);
        1:  235-block  0
        1:  236:    std::vector<int> res(1);
        1:  236-block  0
    $$$$$:  236-block  1
    $$$$$:  236-block  2
        1:  237:    std::vector<int> trueRes = {1};
    $$$$$:  237-block  0
    $$$$$:  237-block  1
    $$$$$:  237-block  2
        1:  238:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  239:    ASSERT_EQ(res, trueRes);
        1:  239-block  0
        1:  239-block  1
    %%%%%:  239-block  2
    %%%%%:  239-block  3
    %%%%%:  239-block  4
    %%%%%:  239-block  5
    $$$$$:  239-block  6
    $$$$$:  239-block  7
    $$$$$:  239-block  8
    $$$$$:  239-block  9
    $$$$$:  239-block 10
        1:  240:    avlClear(avlTree);
        1:  240-block  0
        -:  241:}
------------------
_ZN30AVL_Tree_avlEraseByValue7_TestC2Ev:
        1:  231:TEST(AVL_Tree, avlEraseByValue7) {
        1:  231-block  0
------------------
        -:  242:
        2:  243:TEST(AVL_Tree, avlEraseByValue8) {
        1:  244:    AVL_Tree* avlTree = avlInit();
        1:  245:    std::vector<int> input = { 1, 3, 0, -1, -2};
        1:  246:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  247:    avlEraseByValue(avlTree, 0);
        1:  248:    std::vector<int> res(4);
        1:  249:    std::vector<int> trueRes = {-2, -1, 1, 3};
        1:  250:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  251:    ASSERT_EQ(res, trueRes);
        1:  252:    avlClear(avlTree);
        -:  253:}
------------------
_ZN30AVL_Tree_avlEraseByValue8_Test8TestBodyEv:
        1:  243:TEST(AVL_Tree, avlEraseByValue8) {
        1:  244:    AVL_Tree* avlTree = avlInit();
        1:  244-block  0
        1:  245:    std::vector<int> input = { 1, 3, 0, -1, -2};
        1:  245-block  0
    $$$$$:  245-block  1
    $$$$$:  245-block  2
    $$$$$:  245-block  3
        1:  246:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  247:    avlEraseByValue(avlTree, 0);
        1:  247-block  0
        1:  248:    std::vector<int> res(4);
        1:  248-block  0
    $$$$$:  248-block  1
    $$$$$:  248-block  2
        1:  249:    std::vector<int> trueRes = {-2, -1, 1, 3};
    $$$$$:  249-block  0
    $$$$$:  249-block  1
    $$$$$:  249-block  2
        1:  250:    avlSaveInArray(avlTree, res.data(), res.size());
       1*:  251:    ASSERT_EQ(res, trueRes);
        1:  251-block  0
        1:  251-block  1
    %%%%%:  251-block  2
    %%%%%:  251-block  3
    %%%%%:  251-block  4
    %%%%%:  251-block  5
    $$$$$:  251-block  6
    $$$$$:  251-block  7
    $$$$$:  251-block  8
    $$$$$:  251-block  9
    $$$$$:  251-block 10
        1:  252:    avlClear(avlTree);
        1:  252-block  0
        -:  253:}
------------------
_ZN30AVL_Tree_avlEraseByValue8_TestC2Ev:
        1:  243:TEST(AVL_Tree, avlEraseByValue8) {
        1:  243-block  0
------------------
        -:  254:
        -:  255://-------------------------------------------------------------------------------------------------------------------------------
        -:  256:
        2:  257:TEST(AVL_Tree, avlSaveInArray) {
        1:  258:    AVL_Tree* avlTree = avlInit();
        1:  259:    int arr[5] = {};
       1*:  260:    ASSERT_EQ(avlSaveInArray(NULL, NULL, 0), AVLERR_NOT_INIT);
       1*:  261:    ASSERT_EQ(avlSaveInArray(avlTree, arr, 0), AVLERR_OK);
       1*:  262:    ASSERT_EQ(avlSaveInArray(avlTree, NULL, 5), AVLERR_NULL_POINTER_ARG);
       1*:  263:    ASSERT_EQ(avlSaveInArray(avlTree, arr, 1), AVLERR_OK);
        1:  264:    avlClear(avlTree);
        -:  265:}
------------------
_ZN28AVL_Tree_avlSaveInArray_Test8TestBodyEv:
        1:  257:TEST(AVL_Tree, avlSaveInArray) {
        1:  258:    AVL_Tree* avlTree = avlInit();
        1:  258-block  0
        1:  259:    int arr[5] = {};
       1*:  260:    ASSERT_EQ(avlSaveInArray(NULL, NULL, 0), AVLERR_NOT_INIT);
        1:  260-block  0
        1:  260-block  1
        1:  260-block  2
    %%%%%:  260-block  3
    %%%%%:  260-block  4
    %%%%%:  260-block  5
    %%%%%:  260-block  6
    $$$$$:  260-block  7
    $$$$$:  260-block  8
    $$$$$:  260-block  9
    $$$$$:  260-block 10
    $$$$$:  260-block 11
    $$$$$:  260-block 12
    $$$$$:  260-block 13
       1*:  261:    ASSERT_EQ(avlSaveInArray(avlTree, arr, 0), AVLERR_OK);
        1:  261-block  0
        1:  261-block  1
        1:  261-block  2
    %%%%%:  261-block  3
    %%%%%:  261-block  4
    %%%%%:  261-block  5
    %%%%%:  261-block  6
    $$$$$:  261-block  7
    $$$$$:  261-block  8
    $$$$$:  261-block  9
    $$$$$:  261-block 10
    $$$$$:  261-block 11
    $$$$$:  261-block 12
    $$$$$:  261-block 13
       1*:  262:    ASSERT_EQ(avlSaveInArray(avlTree, NULL, 5), AVLERR_NULL_POINTER_ARG);
        1:  262-block  0
        1:  262-block  1
        1:  262-block  2
    %%%%%:  262-block  3
    %%%%%:  262-block  4
    %%%%%:  262-block  5
    %%%%%:  262-block  6
    $$$$$:  262-block  7
    $$$$$:  262-block  8
    $$$$$:  262-block  9
    $$$$$:  262-block 10
    $$$$$:  262-block 11
    $$$$$:  262-block 12
    $$$$$:  262-block 13
       1*:  263:    ASSERT_EQ(avlSaveInArray(avlTree, arr, 1), AVLERR_OK);
        1:  263-block  0
        1:  263-block  1
        1:  263-block  2
    %%%%%:  263-block  3
    %%%%%:  263-block  4
    %%%%%:  263-block  5
    %%%%%:  263-block  6
    $$$$$:  263-block  7
    $$$$$:  263-block  8
    $$$$$:  263-block  9
    $$$$$:  263-block 10
    $$$$$:  263-block 11
    $$$$$:  263-block 12
    $$$$$:  263-block 13
        1:  264:    avlClear(avlTree);
        1:  264-block  0
        -:  265:}
------------------
_ZN28AVL_Tree_avlSaveInArray_TestC2Ev:
        1:  257:TEST(AVL_Tree, avlSaveInArray) {
        1:  257-block  0
------------------
        -:  266:
        -:  267://-------------------------------------------------------------------------------------------------------------------------------
        -:  268:
        2:  269:TEST(AVL_Tree, avlClear) {
        1:  270:    avlClear(NULL);
        1:  271:}
------------------
_ZN22AVL_Tree_avlClear_Test8TestBodyEv:
        1:  269:TEST(AVL_Tree, avlClear) {
        1:  270:    avlClear(NULL);
        1:  270-block  0
        1:  271:}
------------------
_ZN22AVL_Tree_avlClear_TestC2Ev:
        1:  269:TEST(AVL_Tree, avlClear) {
        1:  269-block  0
------------------
        -:  272:
        5:  273:void Sum(Node_t* it, void* data) {
        5:  274:    if (avlEmptyIt(it)) {
        5:  274-block  0
    #####:  275:        return;
    %%%%%:  275-block  0
        -:  276:    }
        5:  277:    avlEmptyIt(NULL);
        5:  277-block  0
        5:  278:    avlGetDataByIt(NULL);
        5:  279:    int* ptr = (int*)data;
        5:  280:    *ptr += avlGetDataByIt(it);
        -:  281:}
        -:  282:
        2:  283:TEST(AVL_Tree, avlForEach1) {
        1:  284:    AVL_Tree* avlTree = avlInit();
        1:  285:    int sum = 0;
        1:  286:    std::vector<int> input = { 0, 1, 2, 3, 4};
        1:  287:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  288:    avlForEach(avlTree, Sum, &sum);
       1*:  289:    ASSERT_EQ(sum, 10);
        1:  290:    avlClear(avlTree);
        -:  291:}
------------------
_ZN25AVL_Tree_avlForEach1_Test8TestBodyEv:
        1:  283:TEST(AVL_Tree, avlForEach1) {
        1:  284:    AVL_Tree* avlTree = avlInit();
        1:  284-block  0
        1:  285:    int sum = 0;
        1:  286:    std::vector<int> input = { 0, 1, 2, 3, 4};
        1:  286-block  0
    $$$$$:  286-block  1
    $$$$$:  286-block  2
    $$$$$:  286-block  3
        1:  287:    avlLoadFromArray(avlTree, input.data(), input.size());
        1:  288:    avlForEach(avlTree, Sum, &sum);
        1:  288-block  0
       1*:  289:    ASSERT_EQ(sum, 10);
        1:  289-block  0
        1:  289-block  1
    %%%%%:  289-block  2
    %%%%%:  289-block  3
    %%%%%:  289-block  4
    %%%%%:  289-block  5
    $$$$$:  289-block  6
    $$$$$:  289-block  7
    $$$$$:  289-block  8
    $$$$$:  289-block  9
    $$$$$:  289-block 10
    $$$$$:  289-block 11
        1:  290:    avlClear(avlTree);
        1:  290-block  0
        -:  291:}
------------------
_ZN25AVL_Tree_avlForEach1_TestC2Ev:
        1:  283:TEST(AVL_Tree, avlForEach1) {
        1:  283-block  0
------------------
        -:  292:
        2:  293:TEST(AVL_Tree, avlForEach2) {
        1:  294:    AVL_Tree* avlTree = avlInit();
       1*:  295:    ASSERT_EQ(AVLERR_NOT_INIT, avlForEach(NULL, Sum, NULL));
       1*:  296:    ASSERT_EQ(AVLERR_OK, avlForEach(avlTree, Sum, NULL));
       1*:  297:    ASSERT_EQ(AVLERR_NULL_POINTER_ARG, avlForEach(avlTree, NULL, NULL));
        1:  298:    avlClear(avlTree);
        -:  299:}
------------------
_ZN25AVL_Tree_avlForEach2_Test8TestBodyEv:
        1:  293:TEST(AVL_Tree, avlForEach2) {
        1:  294:    AVL_Tree* avlTree = avlInit();
        1:  294-block  0
       1*:  295:    ASSERT_EQ(AVLERR_NOT_INIT, avlForEach(NULL, Sum, NULL));
        1:  295-block  0
        1:  295-block  1
    %%%%%:  295-block  2
    %%%%%:  295-block  3
    %%%%%:  295-block  4
    %%%%%:  295-block  5
    $$$$$:  295-block  6
    $$$$$:  295-block  7
    $$$$$:  295-block  8
    $$$$$:  295-block  9
    $$$$$:  295-block 10
    $$$$$:  295-block 11
    $$$$$:  295-block 12
       1*:  296:    ASSERT_EQ(AVLERR_OK, avlForEach(avlTree, Sum, NULL));
        1:  296-block  0
        1:  296-block  1
        1:  296-block  2
    %%%%%:  296-block  3
    %%%%%:  296-block  4
    %%%%%:  296-block  5
    %%%%%:  296-block  6
    $$$$$:  296-block  7
    $$$$$:  296-block  8
    $$$$$:  296-block  9
    $$$$$:  296-block 10
    $$$$$:  296-block 11
    $$$$$:  296-block 12
    $$$$$:  296-block 13
       1*:  297:    ASSERT_EQ(AVLERR_NULL_POINTER_ARG, avlForEach(avlTree, NULL, NULL));
        1:  297-block  0
        1:  297-block  1
        1:  297-block  2
    %%%%%:  297-block  3
    %%%%%:  297-block  4
    %%%%%:  297-block  5
    %%%%%:  297-block  6
    $$$$$:  297-block  7
    $$$$$:  297-block  8
    $$$$$:  297-block  9
    $$$$$:  297-block 10
    $$$$$:  297-block 11
    $$$$$:  297-block 12
    $$$$$:  297-block 13
        1:  298:    avlClear(avlTree);
        1:  298-block  0
        -:  299:}
------------------
_ZN25AVL_Tree_avlForEach2_TestC2Ev:
        1:  293:TEST(AVL_Tree, avlForEach2) {
        1:  293-block  0
------------------
        -:  300:
        2:  301:TEST(AVL_Tree, avlGetMaxElem) {
       1*:  302:    ASSERT_TRUE(!isnan(avlGetMaxElem(NULL)));
        1:  303:    AVL_Tree* avlTree = avlInit();
       1*:  304:    ASSERT_TRUE(!isnan(avlGetMaxElem(avlTree)));
        1:  305:    avlClear(avlTree);
        -:  306:}
------------------
_ZN27AVL_Tree_avlGetMaxElem_Test8TestBodyEv:
        1:  301:TEST(AVL_Tree, avlGetMaxElem) {
       1*:  302:    ASSERT_TRUE(!isnan(avlGetMaxElem(NULL)));
        1:  302-block  0
        1:  302-block  1
    %%%%%:  302-block  2
    %%%%%:  302-block  3
    %%%%%:  302-block  4
    %%%%%:  302-block  5
    %%%%%:  302-block  6
    $$$$$:  302-block  7
    $$$$$:  302-block  8
    $$$$$:  302-block  9
    $$$$$:  302-block 10
    $$$$$:  302-block 11
    $$$$$:  302-block 12
    $$$$$:  302-block 13
        1:  303:    AVL_Tree* avlTree = avlInit();
        1:  303-block  0
       1*:  304:    ASSERT_TRUE(!isnan(avlGetMaxElem(avlTree)));
        1:  304-block  0
    %%%%%:  304-block  1
    %%%%%:  304-block  2
    %%%%%:  304-block  3
    %%%%%:  304-block  4
    %%%%%:  304-block  5
    $$$$$:  304-block  6
    $$$$$:  304-block  7
    $$$$$:  304-block  8
    $$$$$:  304-block  9
    $$$$$:  304-block 10
    $$$$$:  304-block 11
    $$$$$:  304-block 12
        1:  305:    avlClear(avlTree);
        1:  305-block  0
        -:  306:}
------------------
_ZN27AVL_Tree_avlGetMaxElem_TestC2Ev:
        1:  301:TEST(AVL_Tree, avlGetMaxElem) {
        1:  301-block  0
------------------
        -:  307:
        2:  308:TEST(AVL_Tree, avlGetMinElem) {
       1*:  309:    ASSERT_TRUE(!isnan(avlGetMinElem(NULL)));
        1:  310:    AVL_Tree* avlTree = avlInit();
       1*:  311:    ASSERT_TRUE(!isnan(avlGetMinElem(avlTree)));
        1:  312:    avlClear(avlTree);
        -:  313:}
