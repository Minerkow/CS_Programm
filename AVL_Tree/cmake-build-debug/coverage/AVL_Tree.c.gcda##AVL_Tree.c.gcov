        -:    0:Source:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/AVL_Tree.c
        -:    0:Graph:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/cmake-build-debug/CMakeFiles/AVL_Tree_Test.dir/AVL_Tree.c.gcno
        -:    0:Data:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/cmake-build-debug/CMakeFiles/AVL_Tree_Test.dir/AVL_Tree.c.gcda
        -:    0:Runs:1
        -:    1:#include "AVL_Tree.h"
        -:    2:#include "Error.h"
        -:    3:
        -:    4:
        -:    5:struct Node_t {
        -:    6:    struct Node_t* left_;
        -:    7:    struct Node_t* right_;
        -:    8:    struct Node_t* prev_;
        -:    9:
        -:   10:    int balance_factor;
        -:   11:
        -:   12:    int data_;
        -:   13:};
        -:   14:
        -:   15:struct AVL_Tree {
        -:   16:    struct Node_t* top_;
        -:   17:
        -:   18:    size_t size_;
        -:   19:};
        -:   20:
        -:   21://-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        -:   22:
        -:   23:static struct Node_t* avlSmallLeftRotation_ (struct AVL_Tree* avlTree, struct Node_t* top); //TODO:Unit tests
        -:   24:
        -:   25:static struct Node_t* avlBigLeftRotation_ (struct AVL_Tree* avlTree, struct Node_t* top); //TODO:Unit tests
        -:   26:
        -:   27:static struct Node_t* avlSmallRightRotation_ (struct AVL_Tree* avlTree, struct Node_t* top); //TODO:Unit tests
        -:   28:
        -:   29:static struct Node_t* avlBigRightRotation_ (struct AVL_Tree* avlTree, struct Node_t* top); //TODO
        -:   30:
        -:   31:static int avlGetBalanceFactor_(struct Node_t* top);
        -:   32:
        -:   33:static struct Node_t* avlCreateNode_(int data);
        -:   34:
        -:   35:static struct Node_t* avlBalancing_(struct AVL_Tree* avlTree, struct Node_t* top);
        -:   36:
        -:   37:static enum AvlError_t avlNodeBalancing_(struct Node_t* node);
        -:   38:
        -:   39://*Erase elem by pointer
        -:   40:static enum AvlError_t avlEraseByIt_(struct AVL_Tree* avlTree, struct Node_t* it);
        -:   41:
        -:   42://*If the data is in the table, it returns an iterator on it,
        -:   43://*otherwise it returns a null iterator
        -:   44:static struct Node_t* avlFind_(struct AVL_Tree* avlTree, int data);
        -:   45:
        -:   46:void avlPrintNode_ (struct Node_t* top);
        -:   47://------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        -:   48:
        1:   49:enum AvlError_t avlLoadFromArray(struct AVL_Tree* avlTree, int* array, size_t arraySize) {
        1:   50:    if (array == NULL) {
        1:   50-block  0
    #####:   51:        return AVLERR_NULL_POINTER_ARG;
    %%%%%:   51-block  0
        -:   52:    }
        1:   53:    if (avlTree == NULL) {
        1:   53-block  0
    #####:   54:        return AVLERR_NOT_INIT;
    %%%%%:   54-block  0
        -:   55:    }
        1:   56:    if (arraySize == 0) {
        1:   56-block  0
    #####:   57:        return AVLERR_OK;
    %%%%%:   57-block  0
        -:   58:    }
        8:   59:    for (size_t i = 0; i < arraySize; ++i) {
        1:   59-block  0
        7:   59-block  1
        8:   59-block  2
        7:   60:        if (avlInsert(avlTree, array[i]) != AVLERR_OK) {
        7:   60-block  0
    #####:   61:            fprintf(stderr, "AVL Insert ERROR");
    %%%%%:   61-block  0
    #####:   62:            return AVLERR_INSERT;
        -:   63:        }
        -:   64:    }
        1:   65:    return AVLERR_OK;
        1:   65-block  0
        -:   66:}
        -:   67:
        -:   68:
        9:   69:enum AvlError_t avlInsert(struct AVL_Tree* avlTree, int data) {
        9:   70:    if (avlTree == NULL) {
        9:   70-block  0
        1:   71:        return AVLERR_NOT_INIT;
        1:   71-block  0
        -:   72:    }
        8:   73:    if (avlTree->top_ == NULL) {
        8:   73-block  0
        2:   74:        avlTree->top_ = avlCreateNode_(data);
        2:   74-block  0
        2:   75:        avlTree->top_->balance_factor = 0;
        2:   76:        avlTree->top_->prev_ = NULL;
        2:   77:        avlTree->size_ = 1;
        2:   78:        return AVLERR_OK;
        -:   79:    }
        6:   80:    struct Node_t* tmp = avlTree->top_;
        6:   81:    struct Node_t* current = avlTree->top_;
       18:   82:    while (tmp != NULL) {
        6:   82-block  0
       18:   82-block  1
       12:   83:        current = tmp;
       12:   84:        if (data > tmp->data_) {
       12:   84-block  0
        8:   85:            tmp = tmp->right_;
        8:   86:            continue;
        8:   86-block  0
        -:   87:        }
        4:   88:        if (data < tmp->data_) {
        4:   88-block  0
        4:   89:            tmp = tmp->left_;
        4:   90:            continue;
        4:   90-block  0
        -:   91:        }
        -:   92:    }
        6:   93:    struct Node_t* newNode = avlCreateNode_(data);
        6:   93-block  0
        6:   94:    newNode->prev_ = current;
        -:   95:
        6:   96:    if (data > current->data_) {
        4:   97:        avlTree->size_++;
        4:   98:        current->right_ = newNode;
        4:   98-block  0
        -:   99:    } else {
        2:  100:        avlTree->size_++;
        2:  101:        current->left_ = newNode;
        2:  101-block  0
        -:  102:    }
        6:  103:    int err = avlNodeBalancing_(current);
        6:  103-block  0
        6:  104:    if (err != AVLERR_OK) {
    #####:  105:        return err;
    %%%%%:  105-block  0
        -:  106:    }
        -:  107:
       18:  108:    while (current != NULL) {
        6:  108-block  0
       18:  108-block  1
       12:  109:        current = avlBalancing_(avlTree, current);
       12:  109-block  0
       12:  110:        if (current == NULL) {
    #####:  111:            fprintf(stderr, "Insert ERROR\n");
    %%%%%:  111-block  0
    #####:  112:            return AVLERR_INSERT;
        -:  113:        }
       12:  114:        current = current->prev_;
       12:  114-block  0
        -:  115:    }
        6:  116:    return AVLERR_OK;
        6:  116-block  0
        -:  117:}
        -:  118:
    #####:  119:struct Node_t* avlFind_(struct AVL_Tree* avlTree, int data) {
        -:  120:    struct Node_t* it;
    #####:  121:    if (avlTree == NULL) {
    %%%%%:  121-block  0
    #####:  122:        fprintf(stderr, "NULL argument in avlFind");
    %%%%%:  122-block  0
    #####:  123:        return NULL;
        -:  124:    }
        -:  125:
    #####:  126:    struct Node_t* tmp = avlTree->top_;
        -:  127:
    #####:  128:    while (tmp != NULL) {
    %%%%%:  128-block  0
    %%%%%:  128-block  1
    #####:  129:        if (data > tmp->data_) {
    %%%%%:  129-block  0
    #####:  130:            tmp = tmp->right_;
    #####:  131:            continue;
    %%%%%:  131-block  0
        -:  132:        }
    #####:  133:        if (data < tmp->data_) {
    %%%%%:  133-block  0
    #####:  134:            tmp = tmp->left_;
    #####:  135:            continue;
    %%%%%:  135-block  0
        -:  136:        }
    #####:  137:        if (data == tmp->data_) {
    %%%%%:  137-block  0
    #####:  138:            it = tmp;
    #####:  139:            return it;
    %%%%%:  139-block  0
        -:  140:        }
        -:  141:    }
    #####:  142:    return NULL;
    %%%%%:  142-block  0
        -:  143:}
        -:  144:
        1:  145:bool avlEmpty(struct AVL_Tree* avlTree) {
        1:  146:    if (avlTree == NULL) {
        1:  146-block  0
    #####:  147:        return true;
    %%%%%:  147-block  0
        -:  148:    }
        1:  149:    if (avlTree->top_ == NULL) {
        1:  149-block  0
        1:  150:        return true;
        1:  150-block  0
        -:  151:    }
    #####:  152:    return false;
    %%%%%:  152-block  0
        -:  153:}
        -:  154:
        8:  155:struct Node_t* avlCreateNode_(int data) {
        8:  156:    struct Node_t* node = (struct Node_t*)calloc(1, sizeof(struct Node_t));
        8:  157:    node->data_ = data;
        8:  158:    return node;
        8:  158-block  0
        -:  159:}
        -:  160:
       12:  161:struct Node_t* avlBalancing_(struct AVL_Tree* avlTree, struct Node_t* top) {
       12:  162:    if (!top) {
       12:  162-block  0
    #####:  163:        return NULL;
    %%%%%:  163-block  0
        -:  164:    }
       12:  165:    int err = avlNodeBalancing_(top);
       12:  165-block  0
       12:  166:    if (err != AVLERR_OK) {
    #####:  167:        return NULL;
    %%%%%:  167-block  0
        -:  168:    }
        -:  169:
       12:  170:    struct Node_t* previous = top->prev_;
       12:  171:    int place = 0;
       12:  172:    if (previous != NULL) {
       12:  172-block  0
        6:  173:        if (previous->right_ == top) {
        6:  173-block  0
        4:  174:            place = 1;
        4:  174-block  0
        -:  175:        } else {
        2:  176:            place = -1;
        2:  176-block  0
        -:  177:        }
        -:  178:    }
       12:  179:    if (top->balance_factor == 2) {
       12:  179-block  0
        1:  180:        if (avlGetBalanceFactor_(top->right_) >= 0) {
        1:  180-block  0
        1:  181:            struct Node_t* newTop = avlSmallLeftRotation_(avlTree, top);
        1:  181-block  0
        1:  182:            if (place == 1) {
        1:  183:                previous->right_ = newTop;
        1:  183-block  0
        -:  184:            }
        1:  185:            if (place == -1) {
        1:  185-block  0
    #####:  186:                previous->left_ = newTop;
    %%%%%:  186-block  0
        -:  187:            }
        1:  188:            return newTop;
        1:  188-block  0
        -:  189:        } else {
    #####:  190:            struct Node_t* newTop = avlBigLeftRotation_(avlTree, top);
    %%%%%:  190-block  0
    #####:  191:            if (place == 1) {
    #####:  192:                previous->right_ = newTop;
    %%%%%:  192-block  0
        -:  193:            }
    #####:  194:            if (place == -1) {
    %%%%%:  194-block  0
    #####:  195:                previous->left_ = newTop;
    %%%%%:  195-block  0
        -:  196:            }
    #####:  197:            return newTop;
    %%%%%:  197-block  0
        -:  198:        }
        -:  199:    }
       11:  200:    if (top->balance_factor == -2) {
       11:  200-block  0
    #####:  201:        if (avlGetBalanceFactor_(top->right_) >= 0) {
    %%%%%:  201-block  0
    #####:  202:            struct Node_t* newTop = avlSmallRightRotation_(avlTree, top);
    %%%%%:  202-block  0
    #####:  203:            if (place == 1) {
    #####:  204:                previous->right_ = newTop;
    %%%%%:  204-block  0
        -:  205:            }
    #####:  206:            if (place == -1) {
    %%%%%:  206-block  0
    #####:  207:                previous->left_ = newTop;
    %%%%%:  207-block  0
        -:  208:            }
    #####:  209:            return newTop;
    %%%%%:  209-block  0
        -:  210:        } else {
    #####:  211:            struct Node_t* newTop = avlBigRightRotation_(avlTree, top);
    %%%%%:  211-block  0
    #####:  212:            if (place == 1) {
    #####:  213:                previous->right_ = newTop;
    %%%%%:  213-block  0
        -:  214:            }
    #####:  215:            if (place == -1) {
    %%%%%:  215-block  0
    #####:  216:                previous->left_ = newTop;
    %%%%%:  216-block  0
        -:  217:            }
    #####:  218:            return newTop;
    %%%%%:  218-block  0
        -:  219:        }
        -:  220:    }
       11:  221:    return top;
       11:  221-block  0
        -:  222:}
        -:  223:
        -:  224:
        -:  225:///
        -:  226:///         nA                                nB
        -:  227:///       /    \                            /    \
        -:  228:///     nL      nB         ---->           nA    nR
        -:  229:///            /  \                       /  \
        -:  230:///           nC    nR                   nL  nC
        -:  231:///
        1:  232:struct Node_t* avlSmallLeftRotation_ (struct AVL_Tree* avlTree, struct Node_t* top) {
        -:  233:
        1:  234:    if (!top || !avlTree) {
        1:  234-block  0
        1:  234-block  1
    #####:  235:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  235-block  0
    #####:  236:        return NULL;
        -:  237:    }
        -:  238:
        1:  239:    struct Node_t* nA = top;
        1:  240:    struct Node_t* nB = top->right_;
        1:  241:    if (!nB) {
        1:  241-block  0
    #####:  242:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  242-block  0
    #####:  243:        return NULL;
        -:  244:    }
        -:  245:
        1:  246:    struct Node_t* nC = nB->left_;
        -:  247:
        1:  248:    nB->prev_ = top->prev_;
        1:  249:    nB->left_ = nA;
        -:  250:
        1:  251:    nA->prev_ = nB;
        1:  252:    nA->right_ = nC;
        -:  253:
        1:  254:    if (nC != NULL) {
        1:  254-block  0
    #####:  255:        nC->prev_ = nA;
    %%%%%:  255-block  0
        -:  256:    }
        -:  257:
        1:  258:    int err = avlNodeBalancing_(nA);
        1:  258-block  0
        1:  259:    if (err != AVLERR_OK) {
    #####:  260:        return NULL;
    %%%%%:  260-block  0
        -:  261:    }
        1:  262:    err = avlNodeBalancing_(nB);
        1:  262-block  0
        1:  263:    if (err != AVLERR_OK) {
    #####:  264:        return NULL;
    %%%%%:  264-block  0
        -:  265:    }
        -:  266:
        1:  267:    if (nB->prev_ == NULL) {
        1:  267-block  0
    #####:  268:        avlTree->top_ = nB;
    %%%%%:  268-block  0
        -:  269:    }
        -:  270:
        1:  271:    return nB;
        1:  271-block  0
        -:  272:}
        -:  273:
        -:  274:///
        -:  275:///     nA                               nC
        -:  276:///   /    \                           /    \
        -:  277:///  nL     nB          ---->         nA     nB
        -:  278:///        /  \                      /  \   /  \
        -:  279:///       nC   nR                   nL  nM nN   nR
        -:  280:///      /  \
        -:  281:///     nM  nN
        -:  282:///
    #####:  283:struct Node_t* avlBigLeftRotation_ (struct AVL_Tree* avlTree, struct Node_t* top) {
    #####:  284:    if (!top || !avlTree) {
    %%%%%:  284-block  0
    %%%%%:  284-block  1
    #####:  285:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  285-block  0
    #####:  286:        return NULL;
        -:  287:    }
        -:  288:
    #####:  289:    struct Node_t* nA = top;
    #####:  290:    struct Node_t* nB = top->right_;
        -:  291:
    #####:  292:    if (!nB) {
    %%%%%:  292-block  0
    #####:  293:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  293-block  0
    #####:  294:        return NULL;
        -:  295:    }
        -:  296:
    #####:  297:    struct Node_t* nC = nB->left_;
        -:  298:
    #####:  299:    if (!nC) {
    %%%%%:  299-block  0
    #####:  300:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  300-block  0
    #####:  301:        return NULL;
        -:  302:    }
        -:  303:
    #####:  304:    struct Node_t* nM = nC->left_;
    #####:  305:    struct Node_t* nN = nC->right_;
        -:  306:
    #####:  307:    nC->prev_ = top->prev_;
    #####:  308:    nC->left_ = nA;
    #####:  309:    nC->right_ = nB;
        -:  310:
    #####:  311:    nA->prev_ = nC;
    #####:  312:    nA->right_ = nM;
        -:  313:
    #####:  314:    nB->prev_ = nC;
    #####:  315:    nB->left_ = nN;
        -:  316:
    #####:  317:    nM->prev_ = nA;
    #####:  318:    nN->prev_ = nC;
        -:  319:
    #####:  320:    int err = avlNodeBalancing_(nA);
    %%%%%:  320-block  0
    #####:  321:    if (err != AVLERR_OK) {
    #####:  322:        return NULL;
    %%%%%:  322-block  0
        -:  323:    }
    #####:  324:    err = avlNodeBalancing_(nB);
    %%%%%:  324-block  0
    #####:  325:    if (err != AVLERR_OK) {
    #####:  326:        return NULL;
    %%%%%:  326-block  0
        -:  327:    }
    #####:  328:    err = avlNodeBalancing_(nC);
    %%%%%:  328-block  0
    #####:  329:    if (err != AVLERR_OK) {
    #####:  330:        return NULL;
    %%%%%:  330-block  0
        -:  331:    }
        -:  332:
    #####:  333:    if (nC->prev_ == NULL) {
    %%%%%:  333-block  0
    #####:  334:        avlTree->top_ = nC;
    %%%%%:  334-block  0
        -:  335:    }
        -:  336:
    #####:  337:    return nC;
    %%%%%:  337-block  0
        -:  338:}
        -:  339:
        -:  340:
        -:  341:///
        -:  342:///         nA                                nB
        -:  343:///       /    \                            /    \
        -:  344:///     nB      nR         ---->           nL    nA
        -:  345:///    /  \                                     /  \
        -:  346:///   nL   nC                                  nC   nR
        -:  347:///
    #####:  348:struct Node_t* avlSmallRightRotation_ (struct AVL_Tree* avlTree, struct Node_t* top) {
    #####:  349:    if (!top || !avlTree) {
    %%%%%:  349-block  0
    %%%%%:  349-block  1
    #####:  350:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  350-block  0
    #####:  351:        return NULL;
        -:  352:    }
        -:  353:
    #####:  354:    struct Node_t *nA = top;
    #####:  355:    struct Node_t *nB = top->left_;
        -:  356:
    #####:  357:    if (!nB) {
    %%%%%:  357-block  0
    #####:  358:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  358-block  0
    #####:  359:        return NULL;
        -:  360:    }
        -:  361:
    #####:  362:    struct Node_t* nC = nB->right_;
        -:  363:
    #####:  364:    nB->prev_ = top->prev_;
    #####:  365:    nB->right_ = nA;
        -:  366:
    #####:  367:    nA->prev_ = nB;
    #####:  368:    nA->left_ = nC;
        -:  369:
    #####:  370:    if (nC != NULL) {
    %%%%%:  370-block  0
    #####:  371:        nC->prev_ = nA;
    %%%%%:  371-block  0
        -:  372:    }
        -:  373:
    #####:  374:    int err = avlNodeBalancing_(nA);
    %%%%%:  374-block  0
    #####:  375:    if (err != AVLERR_OK) {
    #####:  376:        return NULL;
    %%%%%:  376-block  0
        -:  377:    }
    #####:  378:    err = avlNodeBalancing_(nB);
    %%%%%:  378-block  0
    #####:  379:    if (err != AVLERR_OK) {
    #####:  380:        return NULL;
    %%%%%:  380-block  0
        -:  381:    }
        -:  382:
    #####:  383:    if (nB->prev_ == NULL) {
    %%%%%:  383-block  0
    #####:  384:        avlTree->top_ = nB;
    %%%%%:  384-block  0
        -:  385:    }
        -:  386:
    #####:  387:    return nB;
    %%%%%:  387-block  0
        -:  388:}
        -:  389:
        -:  390:
        -:  391:
        -:  392:///
        -:  393:///       nA                               nC
        -:  394:///     /    \                           /    \
        -:  395:///    nB     nR          ---->         nB     nA
        -:  396:///   /  \                             /  \   /  \
        -:  397:///  nL   nC                          nL  nM nN   nR
        -:  398:///      /  \
        -:  399:///     nM  nN
        -:  400:///
    #####:  401:struct Node_t* avlBigRightRotation_ (struct AVL_Tree* avlTree, struct Node_t* top) {
        -:  402:
    #####:  403:    if (!top || !avlTree) {
    %%%%%:  403-block  0
    %%%%%:  403-block  1
    #####:  404:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  404-block  0
    #####:  405:        return NULL;
        -:  406:    }
        -:  407:
    #####:  408:    struct Node_t* nA = top;
    #####:  409:    struct Node_t* nB = nA->left_;
        -:  410:
    #####:  411:    if (!nB) {
    %%%%%:  411-block  0
    #####:  412:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  412-block  0
    #####:  413:        return NULL;
        -:  414:    }
        -:  415:
    #####:  416:    struct Node_t* nC = nB->right_;
        -:  417:
    #####:  418:    if (!nC) {
    %%%%%:  418-block  0
    #####:  419:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  419-block  0
    #####:  420:        return NULL;
        -:  421:    }
        -:  422:
    #####:  423:    struct Node_t* nM = nC->left_;
    #####:  424:    struct Node_t* nN = nC->right_;
        -:  425:
    #####:  426:    nC->right_ = nA;
    #####:  427:    nC->left_ = nB;
    #####:  428:    nC->prev_ = top->prev_;
        -:  429:
    #####:  430:    nB->right_ = nM;
    #####:  431:    nM->prev_ = nB;
        -:  432:
    #####:  433:    nA->left_ = nN;
    #####:  434:    nN->prev_ = nA;
        -:  435:
    #####:  436:    nA->prev_ = nC;
    #####:  437:    nB->prev_ = nC;
        -:  438:
    #####:  439:    int err = avlNodeBalancing_(nB);
    %%%%%:  439-block  0
    #####:  440:    if (err != AVLERR_OK) {
    #####:  441:        return NULL;
    %%%%%:  441-block  0
        -:  442:    }
    #####:  443:    err = avlNodeBalancing_(nA);
    %%%%%:  443-block  0
    #####:  444:    if (err != AVLERR_OK) {
    #####:  445:        return NULL;
    %%%%%:  445-block  0
        -:  446:    }
    #####:  447:    err = avlNodeBalancing_(nC);
    %%%%%:  447-block  0
    #####:  448:    if (err != AVLERR_OK) {
    #####:  449:        return NULL;
    %%%%%:  449-block  0
        -:  450:    }
        -:  451:
    #####:  452:    if (nC->prev_ == NULL) {
    %%%%%:  452-block  0
    #####:  453:        avlTree->top_ = nC;
    %%%%%:  453-block  0
        -:  454:    }
        -:  455:
    #####:  456:    return nC;
    %%%%%:  456-block  0
        -:  457:}
        -:  458:
       41:  459:int avlGetBalanceFactor_(struct Node_t* top) {
       41:  460:    if (!top) {
       41:  460-block  0
       13:  461:        return 0;
       13:  461-block  0
        -:  462:    } else {
       28:  463:        return top->balance_factor;
       28:  463-block  0
        -:  464:    }
        -:  465:}
        -:  466:
    #####:  467:void avlPerror(enum AvlError_t err) {
    #####:  468:    switch (err) {
    %%%%%:  468-block  0
    #####:  469:        case AVLERR_NOT_INIT:
    #####:  470:            fprintf(stderr, "AVL: AVL Tree don't init\n"); return;
    %%%%%:  470-block  0
    #####:  471:        case AVLERR_NULL_POINTER_ARG:
    #####:  472:            fprintf(stderr, "AVL: NULL argument is supplied as an argument\n"); return;
    %%%%%:  472-block  0
    #####:  473:        case AVLERR:
    #####:  474:            fprintf(stderr, "AVL: Error\n"); return;
    %%%%%:  474-block  0
    #####:  475:        case AVLERR_INSERT:
    #####:  476:            fprintf(stderr, "AVL: Insert ERROR\n"); return;
    %%%%%:  476-block  0
    #####:  477:        default:
    #####:  478:            return;
    %%%%%:  478-block  0
        -:  479:    }
        -:  480:}
        -:  481:
        3:  482:struct AVL_Tree* avlInit() {
        3:  483:    struct AVL_Tree* avlTree = calloc(1, sizeof(struct AVL_Tree));
        3:  484:    if (avlTree == NULL) {
        3:  484-block  0
    #####:  485:        return NULL;
    %%%%%:  485-block  0
        -:  486:    }
        3:  487:    return avlTree;
        3:  487-block  0
        -:  488:}
        -:  489:
       20:  490:enum AvlError_t avlNodeBalancing_(struct Node_t* node) {
       20:  491:    if (!node) {
       20:  491-block  0
    #####:  492:        return AVLERR_BALANCE;
    %%%%%:  492-block  0
        -:  493:    }
       20:  494:    node->balance_factor = avlGetBalanceFactor_(node->right_) + avlGetBalanceFactor_(node->left_);
       20:  494-block  0
       20:  495:    if (node->right_ != NULL) {
       17:  496:        node->balance_factor++;
       17:  496-block  0
        -:  497:    }
       20:  498:    if (node->left_ != NULL) {
       20:  498-block  0
       10:  499:        node->balance_factor--;
       10:  499-block  0
        -:  500:    }
       20:  501:    return AVLERR_OK;
       20:  501-block  0
        -:  502:}
        -:  503:
    #####:  504:void avlTreePrint_(struct AVL_Tree* avlTree) {
    #####:  505:    avlPrintNode_(avlTree->top_);
    %%%%%:  505-block  0
    #####:  506:}
    #####:  507:void avlPrintNode_(struct Node_t* top) {
    #####:  508:    if (top == NULL){
    %%%%%:  508-block  0
    #####:  509:        fprintf (stderr, "Error: top is NULL, line - %d\n", __LINE__);
    %%%%%:  509-block  0
    #####:  510:        return;
        -:  511:    }
    #####:  512:    if (top->left_ == NULL && top->right_ == NULL)
    %%%%%:  512-block  0
    %%%%%:  512-block  1
    #####:  513:        return;
    %%%%%:  513-block  0
        -:  514:
    #####:  515:    printf("%d ", top->data_);
    %%%%%:  515-block  0
        -:  516:
    #####:  517:    if (top->left_ == NULL) {
    #####:  518:        printf ("NULL ");
    %%%%%:  518-block  0
        -:  519:        //return;
        -:  520:    } else {
    #####:  521:        printf("%d ", top->left_->data_);
    %%%%%:  521-block  0
        -:  522:    }
        -:  523:
    #####:  524:    if (top->right_ == NULL)
    %%%%%:  524-block  0
        -:  525:    {
        -:  526:        //printf ("_%d_", top->right->lexem.lex.num);
    #####:  527:        printf("NULL ");
    %%%%%:  527-block  0
        -:  528:        //return;
        -:  529:    } else {
    #####:  530:        printf("%d ", top->right_->data_);
    %%%%%:  530-block  0
        -:  531:    }
        -:  532:
    #####:  533:    printf ("\n");
    %%%%%:  533-block  0
    #####:  534:    if (top->left_ != NULL) {
    #####:  535:        avlPrintNode_(top->left_);
    %%%%%:  535-block  0
        -:  536:    }
    #####:  537:    if (top->right_ != NULL) {
    %%%%%:  537-block  0
    #####:  538:        avlPrintNode_(top->right_);
    %%%%%:  538-block  0
        -:  539:    }
        -:  540:}
        -:  541:
    #####:  542:size_t avlSize(struct AVL_Tree* avlTree) {
    #####:  543:    if (avlTree == NULL) {
    %%%%%:  543-block  0
    #####:  544:        return NAN;
    %%%%%:  544-block  0
        -:  545:    }
    #####:  546:    return avlTree->size_;
    %%%%%:  546-block  0
        -:  547:}
        -:  548:
    #####:  549:enum AvlError_t avlEraseByValue(struct AVL_Tree* avlTree, int data) {
    #####:  550:    if (avlTree == NULL) {
    %%%%%:  550-block  0
    #####:  551:        return AVLERR_NULL_POINTER_ARG;
    %%%%%:  551-block  0
        -:  552:    }
    #####:  553:    struct Node_t* it = avlFind_(avlTree, data);
    %%%%%:  553-block  0
    #####:  554:    if (it == NULL) {
    #####:  555:        return AVLERR_OK;
    %%%%%:  555-block  0
        -:  556:    }
    #####:  557:    return avlEraseByIt_(avlTree, it);
    %%%%%:  557-block  0
        -:  558:}
        -:  559:
    #####:  560:enum AvlError_t avlEraseByIt_(struct AVL_Tree* avlTree, struct Node_t* it) {
    #####:  561:    if (avlTree == NULL || it == NULL) {
    %%%%%:  561-block  0
    %%%%%:  561-block  1
    #####:  562:        return AVLERR_NULL_POINTER_ARG;
    %%%%%:  562-block  0
        -:  563:    }
    #####:  564:    struct Node_t* ptr = it;
    #####:  565:    if (ptr->left_ == NULL && ptr->right_ == NULL) {
    %%%%%:  565-block  0
    %%%%%:  565-block  1
    #####:  566:        if (ptr->prev_ == NULL) {
    %%%%%:  566-block  0
    #####:  567:            free(ptr);
    #####:  568:            avlTree->size_--;
    #####:  569:            avlTree->top_ = NULL;
    #####:  570:            return AVLERR_OK;
    %%%%%:  570-block  0
        -:  571:        }
    #####:  572:        if (ptr->prev_->left_ == ptr) {
    %%%%%:  572-block  0
    #####:  573:            ptr->prev_->left_ = NULL;
    #####:  574:            free(ptr);
    %%%%%:  574-block  0
        -:  575:        } else {
    #####:  576:            ptr->prev_->right_ = NULL;
    #####:  577:            free(ptr);
    %%%%%:  577-block  0
        -:  578:        }
        -:  579:    } else {
    #####:  580:        struct Node_t* tmp = ptr->left_;
    #####:  581:        struct Node_t* current = tmp;
    #####:  582:        while (tmp != NULL) {
    %%%%%:  582-block  0
    %%%%%:  582-block  1
    #####:  583:            current = tmp;
    #####:  584:            tmp = tmp->right_;
    %%%%%:  584-block  0
        -:  585:        }
    #####:  586:        assert(current->right_ == NULL);
    %%%%%:  586-block  0
    %%%%%:  586-block  1
        -:  587:
    #####:  588:        struct Node_t* prev = current->prev_;
    #####:  589:        ptr->data_ = current->data_;
    #####:  590:        ptr->left_ = current->left_;
    #####:  591:        current->left_->prev_ = ptr;
        -:  592:
    #####:  593:        free(current);
    #####:  594:        avlTree->size_--;
        -:  595:
    #####:  596:        while (prev != ptr) {
    %%%%%:  596-block  0
    %%%%%:  596-block  1
    #####:  597:            avlBalancing_(avlTree, prev);
    %%%%%:  597-block  0
    #####:  598:            prev = prev->prev_;
        -:  599:        }
        -:  600:    }
    #####:  601:    struct Node_t* tmp = ptr;
    #####:  602:    while (tmp != NULL) {
    %%%%%:  602-block  0
    %%%%%:  602-block  1
    #####:  603:        tmp = avlBalancing_(avlTree, tmp);
    %%%%%:  603-block  0
    #####:  604:        tmp = tmp->prev_;
        -:  605:    }
    #####:  606:    return AVLERR_OK;
    %%%%%:  606-block  0
        -:  607:}
        -:  608:
    #####:  609:void avlForEach(void (*foo)(struct Node_t* it, void* data), void* data) {
        -:  610:
    #####:  611:}
