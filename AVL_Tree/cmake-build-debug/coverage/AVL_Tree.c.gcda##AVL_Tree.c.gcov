        -:    0:Source:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/AVL_Tree.c
        -:    0:Graph:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/cmake-build-debug/CMakeFiles/AVL_Tree_Test.dir/AVL_Tree.c.gcno
        -:    0:Data:-
        -:    0:Runs:0
        -:    1:#include "AVL_Tree.h"
        -:    2:#include "Error.h"
        -:    3:
        -:    4:
        -:    5:struct Node_t {
        -:    6:    struct Node_t* left_;
        -:    7:    struct Node_t* right_;
        -:    8:    struct Node_t* prev_;
        -:    9:
        -:   10:    int height_;
        -:   11:
        -:   12:    int data_;
        -:   13:};
        -:   14:
        -:   15:struct AVL_Tree {
        -:   16:    struct Node_t* top_;
        -:   17:
        -:   18:    size_t size_;
        -:   19:};
        -:   20:
        -:   21://-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        -:   22:
        -:   23:static struct Node_t* avlSmallLeftRotation_ (struct AVL_Tree* avlTree, struct Node_t* top); //TODO:Unit tests
        -:   24:
        -:   25:static struct Node_t* avlBigLeftRotation_ (struct AVL_Tree* avlTree, struct Node_t* top); //TODO:Unit tests
        -:   26:
        -:   27:static struct Node_t* avlSmallRightRotation_ (struct AVL_Tree* avlTree, struct Node_t* top); //TODO:Unit tests
        -:   28:
        -:   29:static struct Node_t* avlBigRightRotation_ (struct AVL_Tree* avlTree, struct Node_t* top); //TODO
        -:   30:
        -:   31:static int avlGetBalanceFactor_(struct Node_t* top);
        -:   32:
        -:   33:static struct Node_t* avlCreateNode_(int data);
        -:   34:
        -:   35:static struct Node_t* avlBalancing_(struct AVL_Tree* avlTree, struct Node_t* top);
        -:   36:
        -:   37:static enum AvlError_t avlNodeBalancing_(struct Node_t* node);
        -:   38:
        -:   39://*Erase elem by pointer
        -:   40:static enum AvlError_t avlEraseByIt_(struct AVL_Tree* avlTree, struct Node_t* it);
        -:   41:
        -:   42://*If the data is in the table, it returns an iterator on it,
        -:   43://*otherwise it returns a null iterator
        -:   44:static struct Node_t* avlFind_(struct AVL_Tree* avlTree, int data);
        -:   45:
        -:   46:static void avlPrintNode_ (struct Node_t* top);
        -:   47:
        -:   48:static int avlNodeHeight_(struct Node_t* top);
        -:   49://------------------------------------------------------------------------------------------------------------------------------------------------------------------------
        -:   50:
    #####:   51:enum AvlError_t avlLoadFromArray(struct AVL_Tree* avlTree, int* array, size_t arraySize) {
    #####:   52:    if (array == NULL) {
    %%%%%:   52-block  0
    #####:   53:        return AVLERR_NULL_POINTER_ARG;
    %%%%%:   53-block  0
        -:   54:    }
    #####:   55:    if (avlTree == NULL) {
    %%%%%:   55-block  0
    #####:   56:        return AVLERR_NOT_INIT;
    %%%%%:   56-block  0
        -:   57:    }
    #####:   58:    if (arraySize == 0) {
    %%%%%:   58-block  0
    #####:   59:        return AVLERR_OK;
    %%%%%:   59-block  0
        -:   60:    }
    #####:   61:    for (size_t i = 0; i < arraySize; ++i) {
    %%%%%:   61-block  0
    %%%%%:   61-block  1
    %%%%%:   61-block  2
        -:   62:        //printf("Insert: %d\n", array[i]);
    #####:   63:        if (avlInsert(avlTree, array[i]) != AVLERR_OK) {
    %%%%%:   63-block  0
    #####:   64:            fprintf(stderr, "AVL Insert ERROR");
    %%%%%:   64-block  0
    #####:   65:            return AVLERR_INSERT;
        -:   66:        }
        -:   67:        //avlPrintTree_(avlTree);
        -:   68:    }
    #####:   69:    return AVLERR_OK;
    %%%%%:   69-block  0
        -:   70:}
        -:   71:
        -:   72:
    #####:   73:enum AvlError_t avlInsert(struct AVL_Tree* avlTree, int data) {
    #####:   74:    if (avlTree == NULL) {
    %%%%%:   74-block  0
    #####:   75:        return AVLERR_NOT_INIT;
    %%%%%:   75-block  0
        -:   76:    }
    #####:   77:    if (avlTree->top_ == NULL) {
    %%%%%:   77-block  0
    #####:   78:        avlTree->top_ = avlCreateNode_(data);
    %%%%%:   78-block  0
    #####:   79:        avlTree->top_->height_ = 0;
    #####:   80:        avlTree->top_->prev_ = NULL;
    #####:   81:        avlTree->size_ = 1;
    #####:   82:        return AVLERR_OK;
        -:   83:    }
    #####:   84:    struct Node_t* tmp = avlTree->top_;
    #####:   85:    struct Node_t* current = avlTree->top_;
    #####:   86:    while (tmp != NULL) {
    %%%%%:   86-block  0
    %%%%%:   86-block  1
    #####:   87:        current = tmp;
    #####:   88:        if (data > tmp->data_) {
    %%%%%:   88-block  0
    #####:   89:            tmp = tmp->right_;
    #####:   90:            continue;
    %%%%%:   90-block  0
        -:   91:        }
    #####:   92:        if (data < tmp->data_) {
    %%%%%:   92-block  0
    #####:   93:            tmp = tmp->left_;
    #####:   94:            continue;
    %%%%%:   94-block  0
        -:   95:        }
    #####:   96:        if (data == tmp->data_) {
    %%%%%:   96-block  0
    #####:   97:            return AVLERR_OK;
    %%%%%:   97-block  0
        -:   98:        }
        -:   99:    }
    #####:  100:    struct Node_t* newNode = avlCreateNode_(data);
    %%%%%:  100-block  0
    #####:  101:    newNode->prev_ = current;
        -:  102:
    #####:  103:    avlTree->size_++;
    #####:  104:    if (data > current->data_) {
    #####:  105:        current->right_ = newNode;
    %%%%%:  105-block  0
        -:  106:    } else {
    #####:  107:        current->left_ = newNode;
    %%%%%:  107-block  0
        -:  108:    }
    #####:  109:    int err = avlNodeBalancing_(current);
    %%%%%:  109-block  0
    #####:  110:    if (err != AVLERR_OK) {
    #####:  111:        return err;
    %%%%%:  111-block  0
        -:  112:    }
        -:  113:
    #####:  114:    while (current != NULL) {
    %%%%%:  114-block  0
    %%%%%:  114-block  1
    #####:  115:        current = avlBalancing_(avlTree, current);
    %%%%%:  115-block  0
    #####:  116:        if (current == NULL) {
    #####:  117:            fprintf(stderr, "Insert ERROR\n");
    %%%%%:  117-block  0
    #####:  118:            return AVLERR_INSERT;
        -:  119:        }
    #####:  120:        current = current->prev_;
    %%%%%:  120-block  0
        -:  121:    }
    #####:  122:    return AVLERR_OK;
    %%%%%:  122-block  0
        -:  123:}
        -:  124:
    #####:  125:struct Node_t* avlFind_(struct AVL_Tree* avlTree, int data) {
        -:  126:    struct Node_t* it;
    #####:  127:    if (avlTree == NULL) {
    %%%%%:  127-block  0
    #####:  128:        fprintf(stderr, "NULL argument in avlFind");
    %%%%%:  128-block  0
    #####:  129:        return NULL;
        -:  130:    }
        -:  131:
    #####:  132:    struct Node_t* tmp = avlTree->top_;
        -:  133:
    #####:  134:    while (tmp != NULL) {
    %%%%%:  134-block  0
    %%%%%:  134-block  1
    #####:  135:        if (data > tmp->data_) {
    %%%%%:  135-block  0
    #####:  136:            tmp = tmp->right_;
    #####:  137:            continue;
    %%%%%:  137-block  0
        -:  138:        }
    #####:  139:        if (data < tmp->data_) {
    %%%%%:  139-block  0
    #####:  140:            tmp = tmp->left_;
    #####:  141:            continue;
    %%%%%:  141-block  0
        -:  142:        }
    #####:  143:        if (data == tmp->data_) {
    %%%%%:  143-block  0
    #####:  144:            it = tmp;
    #####:  145:            return it;
    %%%%%:  145-block  0
        -:  146:        }
        -:  147:    }
    #####:  148:    return NULL;
    %%%%%:  148-block  0
        -:  149:}
        -:  150:
    #####:  151:bool avlEmpty(struct AVL_Tree* avlTree) {
    #####:  152:    if (avlTree == NULL) {
    %%%%%:  152-block  0
    #####:  153:        return true;
    %%%%%:  153-block  0
        -:  154:    }
    #####:  155:    if (avlTree->top_ == NULL) {
    %%%%%:  155-block  0
    #####:  156:        return true;
    %%%%%:  156-block  0
        -:  157:    }
    #####:  158:    return false;
    %%%%%:  158-block  0
        -:  159:}
        -:  160:
    #####:  161:struct Node_t* avlCreateNode_(int data) {
    #####:  162:    struct Node_t* node = (struct Node_t*)calloc(1, sizeof(struct Node_t));
    #####:  163:    node->data_ = data;
    #####:  164:    return node;
    %%%%%:  164-block  0
        -:  165:}
        -:  166:
    #####:  167:struct Node_t* avlBalancing_(struct AVL_Tree* avlTree, struct Node_t* top) {
    #####:  168:    if (!top) {
    %%%%%:  168-block  0
    #####:  169:        return NULL;
    %%%%%:  169-block  0
        -:  170:    }
    #####:  171:    int err = avlNodeBalancing_(top);
    %%%%%:  171-block  0
    #####:  172:    if (err != AVLERR_OK) {
    #####:  173:        return NULL;
    %%%%%:  173-block  0
        -:  174:    }
        -:  175:
    #####:  176:    struct Node_t* previous = top->prev_;
    #####:  177:    int place = 0;
    #####:  178:    if (previous != NULL) {
    %%%%%:  178-block  0
    #####:  179:        if (previous->right_ == top) {
    %%%%%:  179-block  0
    #####:  180:            place = 1;
    %%%%%:  180-block  0
        -:  181:        } else {
    #####:  182:            place = -1;
    %%%%%:  182-block  0
        -:  183:        }
        -:  184:    }
    #####:  185:    if (avlGetBalanceFactor_(top) == 2) {
    %%%%%:  185-block  0
    #####:  186:        if (avlGetBalanceFactor_(top->right_) >= 0) {
    %%%%%:  186-block  0
    #####:  187:            struct Node_t* newTop = avlSmallLeftRotation_(avlTree, top);
    %%%%%:  187-block  0
    #####:  188:            if (place == 1) {
    #####:  189:                previous->right_ = newTop;
    %%%%%:  189-block  0
        -:  190:            }
    #####:  191:            if (place == -1) {
    %%%%%:  191-block  0
    #####:  192:                previous->left_ = newTop;
    %%%%%:  192-block  0
        -:  193:            }
    #####:  194:            return newTop;
    %%%%%:  194-block  0
        -:  195:        } else {
    #####:  196:            struct Node_t* newTop = avlBigLeftRotation_(avlTree, top);
    %%%%%:  196-block  0
    #####:  197:            if (place == 1) {
    #####:  198:                previous->right_ = newTop;
    %%%%%:  198-block  0
        -:  199:            }
    #####:  200:            if (place == -1) {
    %%%%%:  200-block  0
    #####:  201:                previous->left_ = newTop;
    %%%%%:  201-block  0
        -:  202:            }
    #####:  203:            return newTop;
    %%%%%:  203-block  0
        -:  204:        }
        -:  205:    }
    #####:  206:    if (avlGetBalanceFactor_(top) == -2) {
    %%%%%:  206-block  0
    #####:  207:        if (avlGetBalanceFactor_(top->right_) >= 0) {
    %%%%%:  207-block  0
    #####:  208:            struct Node_t* newTop = avlSmallRightRotation_(avlTree, top);
    %%%%%:  208-block  0
    #####:  209:            if (place == 1) {
    #####:  210:                previous->right_ = newTop;
    %%%%%:  210-block  0
        -:  211:            }
    #####:  212:            if (place == -1) {
    %%%%%:  212-block  0
    #####:  213:                previous->left_ = newTop;
    %%%%%:  213-block  0
        -:  214:            }
    #####:  215:            return newTop;
    %%%%%:  215-block  0
        -:  216:        } else {
    #####:  217:            struct Node_t* newTop = avlBigRightRotation_(avlTree, top);
    %%%%%:  217-block  0
    #####:  218:            if (place == 1) {
    #####:  219:                previous->right_ = newTop;
    %%%%%:  219-block  0
        -:  220:            }
    #####:  221:            if (place == -1) {
    %%%%%:  221-block  0
    #####:  222:                previous->left_ = newTop;
    %%%%%:  222-block  0
        -:  223:            }
    #####:  224:            return newTop;
    %%%%%:  224-block  0
        -:  225:        }
        -:  226:    }
        -:  227:    assert(1 && "Oooops");
    #####:  228:    return top;
    %%%%%:  228-block  0
        -:  229:}
        -:  230:
        -:  231:
        -:  232:///
        -:  233:///         nA                                nB
        -:  234:///       /    \                            /    \
        -:  235:///     nL      nB         ---->           nA    nR
        -:  236:///            /  \                       /  \
        -:  237:///           nC    nR                   nL  nC
        -:  238:///
    #####:  239:struct Node_t* avlSmallLeftRotation_ (struct AVL_Tree* avlTree, struct Node_t* top) {
        -:  240:
    #####:  241:    if (!top || !avlTree) {
    %%%%%:  241-block  0
    %%%%%:  241-block  1
    #####:  242:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  242-block  0
    #####:  243:        return NULL;
        -:  244:    }
        -:  245:
    #####:  246:    struct Node_t* nA = top;
    #####:  247:    struct Node_t* nB = top->right_;
    #####:  248:    if (!nB) {
    %%%%%:  248-block  0
    #####:  249:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  249-block  0
    #####:  250:        return NULL;
        -:  251:    }
        -:  252:
    #####:  253:    struct Node_t* nC = nB->left_;
        -:  254:
    #####:  255:    nB->prev_ = top->prev_;
    #####:  256:    nB->left_ = nA;
        -:  257:
    #####:  258:    nA->prev_ = nB;
    #####:  259:    nA->right_ = nC;
        -:  260:
    #####:  261:    if (nC != NULL) {
    %%%%%:  261-block  0
    #####:  262:        nC->prev_ = nA;
    %%%%%:  262-block  0
        -:  263:    }
        -:  264:
    #####:  265:    int err = avlNodeBalancing_(nA);
    %%%%%:  265-block  0
    #####:  266:    if (err != AVLERR_OK) {
    #####:  267:        return NULL;
    %%%%%:  267-block  0
        -:  268:    }
    #####:  269:    err = avlNodeBalancing_(nB);
    %%%%%:  269-block  0
    #####:  270:    if (err != AVLERR_OK) {
    #####:  271:        return NULL;
    %%%%%:  271-block  0
        -:  272:    }
        -:  273:
    #####:  274:    if (nB->prev_ == NULL) {
    %%%%%:  274-block  0
    #####:  275:        avlTree->top_ = nB;
    %%%%%:  275-block  0
        -:  276:    }
        -:  277:
    #####:  278:    return nB;
    %%%%%:  278-block  0
        -:  279:}
        -:  280:
        -:  281:///
        -:  282:///     nA                               nC
        -:  283:///   /    \                           /    \
        -:  284:///  nL     nB          ---->         nA     nB
        -:  285:///        /  \                      /  \   /  \
        -:  286:///       nC   nR                   nL  nM nN   nR
        -:  287:///      /  \
        -:  288:///     nM  nN
        -:  289:///
    #####:  290:struct Node_t* avlBigLeftRotation_ (struct AVL_Tree* avlTree, struct Node_t* top) {
    #####:  291:    if (!top || !avlTree) {
    %%%%%:  291-block  0
    %%%%%:  291-block  1
    #####:  292:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  292-block  0
    #####:  293:        return NULL;
        -:  294:    }
        -:  295:
    #####:  296:    struct Node_t* nA = top;
    #####:  297:    struct Node_t* nB = top->right_;
        -:  298:
    #####:  299:    if (!nB) {
    %%%%%:  299-block  0
    #####:  300:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  300-block  0
    #####:  301:        return NULL;
        -:  302:    }
        -:  303:
    #####:  304:    struct Node_t* nC = nB->left_;
        -:  305:
    #####:  306:    if (!nC) {
    %%%%%:  306-block  0
    #####:  307:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  307-block  0
    #####:  308:        return NULL;
        -:  309:    }
        -:  310:
    #####:  311:    struct Node_t* nM = nC->left_;
    #####:  312:    struct Node_t* nN = nC->right_;
        -:  313:
    #####:  314:    nC->prev_ = top->prev_;
    #####:  315:    nC->left_ = nA;
    #####:  316:    nC->right_ = nB;
        -:  317:
    #####:  318:    nA->prev_ = nC;
    #####:  319:    nA->right_ = nM;
        -:  320:
    #####:  321:    nB->prev_ = nC;
    #####:  322:    nB->left_ = nN;
        -:  323:
    #####:  324:    if (nM != NULL) {
    %%%%%:  324-block  0
    #####:  325:        nM->prev_ = nA;
    %%%%%:  325-block  0
        -:  326:    }
    #####:  327:    if (nN != NULL) {
    %%%%%:  327-block  0
    #####:  328:        nN->prev_ = nB;
    %%%%%:  328-block  0
        -:  329:    }
        -:  330:
    #####:  331:    int err = avlNodeBalancing_(nA);
    %%%%%:  331-block  0
    #####:  332:    if (err != AVLERR_OK) {
    #####:  333:        return NULL;
    %%%%%:  333-block  0
        -:  334:    }
    #####:  335:    err = avlNodeBalancing_(nB);
    %%%%%:  335-block  0
    #####:  336:    if (err != AVLERR_OK) {
    #####:  337:        return NULL;
    %%%%%:  337-block  0
        -:  338:    }
    #####:  339:    err = avlNodeBalancing_(nC);
    %%%%%:  339-block  0
    #####:  340:    if (err != AVLERR_OK) {
    #####:  341:        return NULL;
    %%%%%:  341-block  0
        -:  342:    }
        -:  343:
    #####:  344:    if (nC->prev_ == NULL) {
    %%%%%:  344-block  0
    #####:  345:        avlTree->top_ = nC;
    %%%%%:  345-block  0
        -:  346:    }
        -:  347:
    #####:  348:    return nC;
    %%%%%:  348-block  0
        -:  349:}
        -:  350:
        -:  351:
        -:  352:///
        -:  353:///         nA                                nB
        -:  354:///       /    \                            /    \
        -:  355:///     nB      nR         ---->           nL    nA
        -:  356:///    /  \                                     /  \
        -:  357:///   nL   nC                                  nC   nR
        -:  358:///
    #####:  359:struct Node_t* avlSmallRightRotation_ (struct AVL_Tree* avlTree, struct Node_t* top) {
    #####:  360:    if (!top || !avlTree) {
    %%%%%:  360-block  0
    %%%%%:  360-block  1
    #####:  361:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  361-block  0
    #####:  362:        return NULL;
        -:  363:    }
        -:  364:
    #####:  365:    struct Node_t *nA = top;
    #####:  366:    struct Node_t *nB = top->left_;
        -:  367:
    #####:  368:    if (!nB) {
    %%%%%:  368-block  0
    #####:  369:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  369-block  0
    #####:  370:        return NULL;
        -:  371:    }
        -:  372:
    #####:  373:    struct Node_t* nC = nB->right_;
        -:  374:
    #####:  375:    nB->prev_ = top->prev_;
    #####:  376:    nB->right_ = nA;
        -:  377:
    #####:  378:    nA->prev_ = nB;
    #####:  379:    nA->left_ = nC;
        -:  380:
    #####:  381:    if (nC != NULL) {
    %%%%%:  381-block  0
    #####:  382:        nC->prev_ = nA;
    %%%%%:  382-block  0
        -:  383:    }
        -:  384:
    #####:  385:    int err = avlNodeBalancing_(nA);
    %%%%%:  385-block  0
    #####:  386:    if (err != AVLERR_OK) {
    #####:  387:        return NULL;
    %%%%%:  387-block  0
        -:  388:    }
    #####:  389:    err = avlNodeBalancing_(nB);
    %%%%%:  389-block  0
    #####:  390:    if (err != AVLERR_OK) {
    #####:  391:        return NULL;
    %%%%%:  391-block  0
        -:  392:    }
        -:  393:
    #####:  394:    if (nB->prev_ == NULL) {
    %%%%%:  394-block  0
    #####:  395:        avlTree->top_ = nB;
    %%%%%:  395-block  0
        -:  396:    }
        -:  397:
    #####:  398:    return nB;
    %%%%%:  398-block  0
        -:  399:}
        -:  400:
        -:  401:
        -:  402:
        -:  403:///
        -:  404:///       nA                               nC
        -:  405:///     /    \                           /    \
        -:  406:///    nB     nR          ---->         nB     nA
        -:  407:///   /  \                             /  \   /  \
        -:  408:///  nL   nC                          nL  nM nN   nR
        -:  409:///      /  \
        -:  410:///     nM  nN
        -:  411:///
    #####:  412:struct Node_t* avlBigRightRotation_ (struct AVL_Tree* avlTree, struct Node_t* top) {
        -:  413:
    #####:  414:    if (!top || !avlTree) {
    %%%%%:  414-block  0
    %%%%%:  414-block  1
    #####:  415:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  415-block  0
    #####:  416:        return NULL;
        -:  417:    }
        -:  418:
    #####:  419:    struct Node_t* nA = top;
    #####:  420:    struct Node_t* nB = nA->left_;
        -:  421:
    #####:  422:    if (!nB) {
    %%%%%:  422-block  0
    #####:  423:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    %%%%%:  423-block  0
    #####:  424:        return NULL;
        -:  425:    }
        -:  426:
    #####:  427:    struct Node_t* nC = nB->right_;
        -:  428:
    #####:  429:    if (!nC) {
    %%%%%:  429-block  0
    #####:  430:        avlPrintNode_(top);
    %%%%%:  430-block  0
    #####:  431:        fprintf(stderr, "\nError line - %d\n", __LINE__);
    #####:  432:        exit(1);
        -:  433:        return NULL;
        -:  434:    }
        -:  435:
    #####:  436:    struct Node_t* nM = nC->left_;
    #####:  437:    struct Node_t* nN = nC->right_;
        -:  438:
    #####:  439:    nC->prev_ = top->prev_;
    #####:  440:    nC->right_ = nA;
    #####:  441:    nC->left_ = nB;
        -:  442:
    #####:  443:    nB->right_ = nM;
    #####:  444:    if (nM != NULL) {
    %%%%%:  444-block  0
    #####:  445:        nM->prev_ = nB;
    %%%%%:  445-block  0
        -:  446:    }
        -:  447:
    #####:  448:    nA->left_ = nN;
    #####:  449:    if (nN != NULL) {
    %%%%%:  449-block  0
    #####:  450:        nN->prev_ = nA;
    %%%%%:  450-block  0
        -:  451:    }
        -:  452:
    #####:  453:    nA->prev_ = nC;
    #####:  454:    nB->prev_ = nC;
        -:  455:
    #####:  456:    int err = avlNodeBalancing_(nB);
    %%%%%:  456-block  0
    #####:  457:    if (err != AVLERR_OK) {
    #####:  458:        return NULL;
    %%%%%:  458-block  0
        -:  459:    }
    #####:  460:    err = avlNodeBalancing_(nA);
    %%%%%:  460-block  0
    #####:  461:    if (err != AVLERR_OK) {
    #####:  462:        return NULL;
    %%%%%:  462-block  0
        -:  463:    }
    #####:  464:    err = avlNodeBalancing_(nC);
    %%%%%:  464-block  0
    #####:  465:    if (err != AVLERR_OK) {
    #####:  466:        return NULL;
    %%%%%:  466-block  0
        -:  467:    }
        -:  468:
    #####:  469:    if (nC->prev_ == NULL) {
    %%%%%:  469-block  0
    #####:  470:        avlTree->top_ = nC;
    %%%%%:  470-block  0
        -:  471:    }
        -:  472:
    #####:  473:    return nC;
    %%%%%:  473-block  0
        -:  474:}
        -:  475:
    #####:  476:int avlGetBalanceFactor_(struct Node_t* top) {
    #####:  477:    int balanceFactor = 0;
    #####:  478:    if (top == NULL) {
    %%%%%:  478-block  0
    #####:  479:        return 0;
    %%%%%:  479-block  0
        -:  480:    } else {
    #####:  481:         balanceFactor = avlNodeHeight_(top->right_) -
    %%%%%:  481-block  0
    #####:  482:                    avlNodeHeight_(top->left_);
        -:  483:    }
    #####:  484:    if (top->right_ != NULL) {
    #####:  485:        balanceFactor++;
    %%%%%:  485-block  0
        -:  486:    }
    #####:  487:    if (top->left_ != NULL) {
    %%%%%:  487-block  0
    #####:  488:        balanceFactor--;
    %%%%%:  488-block  0
        -:  489:    }
    #####:  490:    return balanceFactor;
    %%%%%:  490-block  0
        -:  491:}
        -:  492:
    #####:  493:void avlPerror(enum AvlError_t err) {
    #####:  494:    switch (err) {
    %%%%%:  494-block  0
    #####:  495:        case AVLERR_NOT_INIT:
    #####:  496:            fprintf(stderr, "AVL: AVL Tree don't init\n"); return;
    %%%%%:  496-block  0
    #####:  497:        case AVLERR_NULL_POINTER_ARG:
    #####:  498:            fprintf(stderr, "AVL: NULL argument is supplied as an argument\n"); return;
    %%%%%:  498-block  0
    #####:  499:        case AVLERR:
    #####:  500:            fprintf(stderr, "AVL: Error\n"); return;
    %%%%%:  500-block  0
    #####:  501:        case AVLERR_INSERT:
    #####:  502:            fprintf(stderr, "AVL: Insert ERROR\n"); return;
    %%%%%:  502-block  0
    #####:  503:        default:
    #####:  504:            return;
    %%%%%:  504-block  0
        -:  505:    }
        -:  506:}
        -:  507:
    #####:  508:struct AVL_Tree* avlInit() {
    #####:  509:    struct AVL_Tree* avlTree = calloc(1, sizeof(struct AVL_Tree));
    #####:  510:    if (avlTree == NULL) {
    %%%%%:  510-block  0
    #####:  511:        return NULL;
    %%%%%:  511-block  0
        -:  512:    }
    #####:  513:    return avlTree;
    %%%%%:  513-block  0
        -:  514:}
        -:  515:
    #####:  516:enum AvlError_t avlNodeBalancing_(struct Node_t* node) {
    #####:  517:    if (!node) {
    %%%%%:  517-block  0
    #####:  518:        return AVLERR_BALANCE;
    %%%%%:  518-block  0
        -:  519:    }
    #####:  520:    if (avlNodeHeight_(node->right_) >
    %%%%%:  520-block  0
    #####:  521:                        avlNodeHeight_(node->left_)) {
    #####:  522:        node->height_ = avlNodeHeight_(node->right_) + 1;
    %%%%%:  522-block  0
        -:  523:    } else {
    #####:  524:        node->height_ = avlNodeHeight_(node->left_) + 1;
    %%%%%:  524-block  0
        -:  525:    }
    #####:  526:    return AVLERR_OK;
    %%%%%:  526-block  0
        -:  527:}
        -:  528:
    #####:  529:void avlPrintTree_(struct AVL_Tree* avlTree) {
    #####:  530:    avlPrintNode_(avlTree->top_);
    %%%%%:  530-block  0
    #####:  531:}
    #####:  532:void avlPrintNode_(struct Node_t* top) {
    #####:  533:    if (top == NULL){
    %%%%%:  533-block  0
    #####:  534:        fprintf (stderr, "Error: top is NULL, line - %d\n", __LINE__);
    %%%%%:  534-block  0
    #####:  535:        return;
        -:  536:    }
    #####:  537:    if (top->left_ == NULL && top->right_ == NULL)
    %%%%%:  537-block  0
    %%%%%:  537-block  1
    #####:  538:        return;
    %%%%%:  538-block  0
        -:  539:
    #####:  540:    printf("%d ", top->data_);
    %%%%%:  540-block  0
        -:  541:
    #####:  542:    if (top->left_ == NULL) {
    #####:  543:        printf ("NULL ");
    %%%%%:  543-block  0
        -:  544:        //return;
        -:  545:    } else {
    #####:  546:        printf("%d ", top->left_->data_);
    %%%%%:  546-block  0
        -:  547:    }
        -:  548:
    #####:  549:    if (top->right_ == NULL)
    %%%%%:  549-block  0
        -:  550:    {
        -:  551:        //printf ("_%d_", top->right->lexem.lex.num);
    #####:  552:        printf("NULL ");
    %%%%%:  552-block  0
        -:  553:        //return;
        -:  554:    } else {
    #####:  555:        printf("%d ", top->right_->data_);
    %%%%%:  555-block  0
        -:  556:    }
        -:  557:
    #####:  558:    printf ("\n");
    %%%%%:  558-block  0
    #####:  559:    if (top->left_ != NULL) {
    #####:  560:        avlPrintNode_(top->left_);
    %%%%%:  560-block  0
        -:  561:    }
    #####:  562:    if (top->right_ != NULL) {
    %%%%%:  562-block  0
    #####:  563:        avlPrintNode_(top->right_);
    %%%%%:  563-block  0
        -:  564:    }
        -:  565:}
        -:  566:
    #####:  567:size_t avlSize(struct AVL_Tree* avlTree) {
    #####:  568:    if (avlTree == NULL) {
    %%%%%:  568-block  0
    #####:  569:        return 0;
    %%%%%:  569-block  0
        -:  570:    }
    #####:  571:    return avlTree->size_;
    %%%%%:  571-block  0
        -:  572:}
        -:  573:
    #####:  574:enum AvlError_t avlEraseByValue(struct AVL_Tree* avlTree, int data) {
    #####:  575:    if (avlTree == NULL) {
    %%%%%:  575-block  0
    #####:  576:        return AVLERR_NULL_POINTER_ARG;
    %%%%%:  576-block  0
        -:  577:    }
    #####:  578:    struct Node_t* it = avlFind_(avlTree, data);
    %%%%%:  578-block  0
    #####:  579:    if (it == NULL) {
    #####:  580:        return AVLERR_OK;
    %%%%%:  580-block  0
        -:  581:    }
    #####:  582:    return avlEraseByIt_(avlTree, it);
    %%%%%:  582-block  0
        -:  583:}
        -:  584:
    #####:  585:enum AvlError_t avlEraseByIt_(struct AVL_Tree* avlTree, struct Node_t* it) {
    #####:  586:    if (avlTree == NULL || it == NULL) {
    %%%%%:  586-block  0
    %%%%%:  586-block  1
    #####:  587:        return AVLERR_NULL_POINTER_ARG;
    %%%%%:  587-block  0
        -:  588:    }
    #####:  589:    struct Node_t* ptr = it;
    #####:  590:    if (ptr->left_ == NULL && ptr->right_ == NULL) {
    %%%%%:  590-block  0
    %%%%%:  590-block  1
    #####:  591:        if (ptr->prev_ == NULL) {
    %%%%%:  591-block  0
    #####:  592:            free(ptr);
    #####:  593:            avlTree->size_--;
    #####:  594:            avlTree->top_ = NULL;
    #####:  595:            return AVLERR_OK;
    %%%%%:  595-block  0
        -:  596:        }
    #####:  597:        if (ptr->prev_->left_ == ptr) {
    %%%%%:  597-block  0
    #####:  598:            ptr->prev_->left_ = NULL;
    #####:  599:            free(ptr);
    %%%%%:  599-block  0
        -:  600:        } else {
    #####:  601:            ptr->prev_->right_ = NULL;
    #####:  602:            free(ptr);
    %%%%%:  602-block  0
        -:  603:        }
        -:  604:    } else {
    #####:  605:        struct Node_t* tmp = ptr->left_;
    #####:  606:        struct Node_t* current = tmp;
    #####:  607:        while (tmp != NULL) {
    %%%%%:  607-block  0
    %%%%%:  607-block  1
    #####:  608:            current = tmp;
    #####:  609:            tmp = tmp->right_;
    %%%%%:  609-block  0
        -:  610:        }
    #####:  611:        assert(current->right_ == NULL);
    %%%%%:  611-block  0
    %%%%%:  611-block  1
        -:  612:
    #####:  613:        struct Node_t* prev = current->prev_;
    #####:  614:        ptr->data_ = current->data_;
    #####:  615:        ptr->left_ = current->left_;
    #####:  616:        if (current->left_ != NULL) {
    %%%%%:  616-block  0
    #####:  617:            current->left_->prev_ = ptr;
    %%%%%:  617-block  0
        -:  618:        }
        -:  619:
    #####:  620:        free(current);
    #####:  621:        avlTree->size_--;
        -:  622:
    #####:  623:        while (prev != ptr) {
    %%%%%:  623-block  0
    %%%%%:  623-block  1
    #####:  624:            avlBalancing_(avlTree, prev);
    %%%%%:  624-block  0
    #####:  625:            prev = prev->prev_;
        -:  626:        }
        -:  627:    }
    #####:  628:    struct Node_t* tmp = ptr;
    #####:  629:    while (tmp != NULL) {
    %%%%%:  629-block  0
    %%%%%:  629-block  1
    #####:  630:        tmp = avlBalancing_(avlTree, tmp);
    %%%%%:  630-block  0
    #####:  631:        tmp = tmp->prev_;
        -:  632:    }
    #####:  633:    return AVLERR_OK;
    %%%%%:  633-block  0
        -:  634:}
        -:  635:
    #####:  636:void avlForEach(void (*foo)(struct Node_t* it, void* data), void* data) {
        -:  637:
    #####:  638:}
        -:  639:
    #####:  640:int avlNodeHeight_(struct Node_t* top) {
    #####:  641:    if (top == NULL) {
    %%%%%:  641-block  0
    #####:  642:        return 0;
    %%%%%:  642-block  0
        -:  643:    } else {
    #####:  644:        return top->height_;
    %%%%%:  644-block  0
        -:  645:    }
        -:  646:}
