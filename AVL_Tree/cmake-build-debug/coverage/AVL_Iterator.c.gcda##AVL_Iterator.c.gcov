        -:    0:Source:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/AVL_Iterator.c
        -:    0:Graph:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/cmake-build-debug/CMakeFiles/AVL_Tree_Test.dir/AVL_Iterator.c.gcno
        -:    0:Data:/home/minerkow/Рабочий стол/CS_Programm/AVL_Tree/cmake-build-debug/CMakeFiles/AVL_Tree_Test.dir/AVL_Iterator.c.gcda
        -:    0:Runs:1
        -:    1:#include "AVL_Tree.h"
        -:    2:
        -:    3://*Return begin iterator
        -:    4:static struct Node_t* avlBeginIt(struct AVL_Tree* avlTree);
        -:    5:
        -:    6://*Return end iterator
        -:    7:static struct Node_t* avlEndIt_(struct AVL_Tree* avlTree);
        -:    8:
        -:    9://*If the next element exists returns an iterator to it,
        -:   10://*else returns a empty iterator
        -:   11:static struct Node_t* avlNextIt_(struct Node_t* it);
        -:   12:
        -:   13://*If the prev element exists returns an iterator to it,
        -:   14://*else returns a empty iterator
        -:   15:static struct Node_t* avlPrevIt_(struct Node_t* it);
        -:   16:
        -:   17://-----------------------------------------------------------------------------------------------------------
        -:   18:
        -:   19:struct Node_t {
        -:   20:    struct Node_t* left_;
        -:   21:    struct Node_t* right_;
        -:   22:    struct Node_t* prev_;
        -:   23:
        -:   24:    int balance_factor;
        -:   25:
        -:   26:    int data_;
        -:   27:};
        -:   28:
        -:   29:struct AVL_Tree {
        -:   30:    struct Node_t* top_;
        -:   31:
        -:   32:    size_t size_;
        -:   33:};
        -:   34:
        -:   35://------------------------------------------------------------------------------------------
        -:   36:
    #####:   37:bool avlEmptyIt(struct Node_t* it) {
    #####:   38:    if (it == NULL) {
    %%%%%:   38-block  0
    #####:   39:        return true;
    %%%%%:   39-block  0
        -:   40:    }
    #####:   41:    return false;
    %%%%%:   41-block  0
        -:   42:}
        -:   43:
        7:   44:struct Node_t* avlNextIt_(struct Node_t* it) {
        7:   45:    if (it == NULL) {
        7:   45-block  0
    #####:   46:        return it;
    %%%%%:   46-block  0
        -:   47:    }
        7:   48:    if (it->prev_ == NULL) {
        7:   48-block  0
        1:   49:        it = it->right_;
        2:   50:        while (it->left_) {
        1:   50-block  0
        2:   50-block  1
        1:   51:            it = it->left_;
        1:   51-block  0
        -:   52:        }
        1:   53:        return it;
        1:   53-block  0
        -:   54:    }
        6:   55:    if (it->right_ != NULL) {
        6:   55-block  0
        2:   56:        it = it->right_;
        2:   57:        return it;
        2:   57-block  0
        -:   58:    }
        4:   59:    if (it->prev_->left_ == it) {
        4:   59-block  0
        2:   60:        it = it->prev_;
        2:   61:        return it;
        2:   61-block  0
        -:   62:    }
        2:   63:    if (it->prev_->right_ == it) {
        2:   63-block  0
        2:   64:        struct Node_t* tmp = it->prev_;
        3:   65:        while (tmp->prev_ != NULL && tmp->prev_->left_ != tmp) {
        2:   65-block  0
        3:   65-block  1
        2:   65-block  2
        1:   66:            tmp = tmp->prev_;
        1:   66-block  0
        -:   67:        }
        2:   68:        if (tmp->prev_ == NULL) {
        2:   68-block  0
        1:   69:            it = NULL;
        1:   70:            return it;
        1:   70-block  0
        -:   71:        }
        1:   72:        it = tmp->prev_;
        1:   73:        return it;
        1:   73-block  0
        -:   74:    }
        -:   75:    assert(1 && "Ooooops");
    #####:   76:    return it;
    %%%%%:   76-block  0
        -:   77:}
        -:   78:
    #####:   79:struct Node_t* avlPrevIt_(struct Node_t* it) {
    #####:   80:    if (it == NULL) {
    %%%%%:   80-block  0
    #####:   81:        return it;
    %%%%%:   81-block  0
        -:   82:    }
    #####:   83:    if (it->prev_ == NULL) {
    %%%%%:   83-block  0
    #####:   84:        it = it->left_;
    #####:   85:        return it;
    %%%%%:   85-block  0
        -:   86:    }
    #####:   87:    if (it->prev_->right_ == it) {
    %%%%%:   87-block  0
    #####:   88:        it = it->prev_;
    #####:   89:        return it;
    %%%%%:   89-block  0
        -:   90:    }
    #####:   91:    if (it->prev_ == NULL) {
    %%%%%:   91-block  0
    #####:   92:        it = it->left_;
    #####:   93:        return it;
    %%%%%:   93-block  0
        -:   94:    }
    #####:   95:    if (it->prev_->left_ == it) {
    %%%%%:   95-block  0
    #####:   96:        struct Node_t* tmp = it->prev_;
    #####:   97:        while (tmp->prev_ != NULL && tmp->prev_->right_ == tmp) {
    %%%%%:   97-block  0
    %%%%%:   97-block  1
    %%%%%:   97-block  2
    #####:   98:            tmp = tmp->prev_;
    %%%%%:   98-block  0
        -:   99:        }
    #####:  100:        if (tmp->prev_ == NULL) {
    %%%%%:  100-block  0
    #####:  101:            it = NULL;
    #####:  102:            return it;
    %%%%%:  102-block  0
        -:  103:        }
    #####:  104:        it = tmp->prev_->left_;
    #####:  105:        return it;
    %%%%%:  105-block  0
        -:  106:    }
        -:  107:    assert(1 && "Ooooops");
    #####:  108:    return it;
    %%%%%:  108-block  0
        -:  109:}
        -:  110:
        7:  111:int avlGetDataByIt(struct Node_t* it) {
        7:  112:    if (it == NULL) {
        7:  112-block  0
    #####:  113:        return NAN;
    %%%%%:  113-block  0
        -:  114:    }
        7:  115:    return it->data_;
        7:  115-block  0
        -:  116:}
        -:  117:
    #####:  118:bool avlEqualIt(struct Node_t* it1, struct Node_t* it2) {
    #####:  119:    if (it1 == it2) {
    %%%%%:  119-block  0
    #####:  120:        return true;
    %%%%%:  120-block  0
        -:  121:    }
    #####:  122:    return false;
    %%%%%:  122-block  0
        -:  123:}
        -:  124:
        2:  125:struct Node_t* avlBeginIt(struct AVL_Tree* avlTree) {
        2:  126:    if (avlTree == NULL) {
        2:  126-block  0
    #####:  127:        return NULL;
    %%%%%:  127-block  0
        -:  128:    }
        2:  129:    struct Node_t* tmp = avlTree->top_;
        4:  130:    while (tmp->left_ != NULL) {
        2:  130-block  0
        4:  130-block  1
        2:  131:        tmp =tmp->left_;
        2:  131-block  0
        -:  132:    }
        2:  133:    return tmp;
        2:  133-block  0
        -:  134:}
        -:  135:
        1:  136:struct Node_t* avlEndIt_(struct AVL_Tree* avlTree) {
        1:  137:    if (avlTree == NULL) {
        1:  137-block  0
    #####:  138:        return NULL;
    %%%%%:  138-block  0
        -:  139:    }
        1:  140:    struct Node_t* tmp = avlTree->top_;
        1:  141:    while (tmp->right_ != NULL) {
        1:  141-block  0
        1:  141-block  1
    #####:  142:        tmp =tmp->right_;
    %%%%%:  142-block  0
        -:  143:    }
        1:  144:    return tmp;
        1:  144-block  0
        -:  145:}
        -:  146:
        1:  147:int avlGetMaxElem(struct AVL_Tree* avlTree) {
        1:  148:    struct Node_t* it = avlEndIt_(avlTree);
        1:  148-block  0
        1:  149:    if (!it) {
    #####:  150:        return NAN;
    %%%%%:  150-block  0
        -:  151:    }
        1:  152:    return it->data_;
        1:  152-block  0
        -:  153:}
        -:  154:
        1:  155:int avlGetMinElem(struct AVL_Tree* avlTree) {
        1:  156:    struct Node_t* it = avlBeginIt(avlTree);
        1:  156-block  0
        1:  157:    if (!it) {
    #####:  158:        return NAN;
    %%%%%:  158-block  0
        -:  159:    }
        1:  160:    return it->data_;
        1:  160-block  0
        -:  161:}
        -:  162:
        1:  163:enum AvlError_t avlSaveInArray(struct AVL_Tree* avlTree, int* array, size_t lenArray) {
        1:  164:    if (!avlTree) {
        1:  164-block  0
    #####:  165:        return AVLERR_NOT_INIT;
    %%%%%:  165-block  0
        -:  166:    }
        1:  167:    if (lenArray == 0) {
        1:  167-block  0
    #####:  168:        return AVLERR_OK;
    %%%%%:  168-block  0
        -:  169:    }
        1:  170:    if (array == NULL) {
        1:  170-block  0
    #####:  171:        return AVLERR_NULL_POINTER_ARG;
    %%%%%:  171-block  0
        -:  172:    }
        1:  173:    struct Node_t* it = avlBeginIt(avlTree);
        1:  173-block  0
        8:  174:    for (size_t i = 0; i < lenArray; ++i) {
        8:  174-block  0
        7:  175:        if (it == NULL) {
        7:  175-block  0
    #####:  176:            break;
    %%%%%:  176-block  0
        -:  177:        }
        7:  178:        array[i] = avlGetDataByIt(it);
        7:  178-block  0
        7:  179:        it = avlNextIt_(it);
        -:  180:    }
        1:  181:    return AVLERR_OK;
        1:  181-block  0
        -:  182:}
